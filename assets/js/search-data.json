{
  
    
        "post0": {
            "title": "Machinelearning Endtoend Flow Summary",
            "content": "The blog assumes the reader knows some basic Machine Learning terms. . This Summary post should be read along with the below blog post . https://mrg-ai.github.io/blog/2020/09/20/ML_EndToEnd_usingCAHousingDataset.html . Get the data . This could be via files or from a database. Try to get the data into a pandas dataframe. . | That is the best format to do further data exploration. . | Use head(), info(), describe() methods to look at the data and column/column type information . | Using matplotlib visualize the data via histograms for numerical columns . | For Categorical columns, find the unique values using value_counts() . | . Split the data into Training and Test . Splitting the data can be random using a random seed using sklearns test_train_split class . | Get the labels into a different dataframe for using during prediction. . | However, in reality we should split using some unique column in the data (if available) . | We can create such column if that is possible by using some combination of existing columns. . | Sometimes, we may also have to do a stratified data split i.e. data should be taken from the different “strata” of the data. For example – Low Income Grp, High Income Grp etc. . StratifiedShuffleSplit class can be used along with some column which indicates the “strata” | . | . Visualize and Data Cleanup of the training data . Use matplotlib and look at the training data in more detail. . | Create new attributes (new dataframe columns) from existing columns if possible . | Date columns can definitely be used to create new Day, Month, Quarter, Year etc (DatePart function) . | Clean the data for NULLs, Blanks etc through any of the below methods. Each method has its own implications and should be considered appropriately. . Drop such rows . | Use sklearn SimpleImputer to impute such NULLs with Median or Mean values . | . | NOTE – SimpleImputer works only on Numerical columns and CategoricalEncoders work on Categorical columns. We generally create different dataframes for Numericals and Categoricals. There is another Class which can handle both together and we will look at it in next section. . | Handle the Categorical values i.e. convert them to Numbers . Ordinal Encoder Class for Ordinal (they have a relationship between them) Categories like Low, Medium, High . | One Hot Encoder Class for categories which are Nominal (unrelated to one another) like List of State Names (CA, AZ, NY etc.) . | We can also create Custom Transformers to do some custom transformations. An example below. Using BaseEstimator and TransformerMixin classes we can get many existing sklearn methods in the Custom Transformer. . | . | . from sklearn.base import BaseEstimator, TransformerMixin . rooms_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6 . class CombinedAttributesAdder(BaseEstimator, TransformerMixin): . def __init__(self, add_bedrooms_per_room=True): # no *args or **kargs . self.add_bedrooms_per_room = add_bedrooms_per_room . def fit(self, X, y=None): . return self # nothing else to do . def transform(self, X): . rooms_per_household = X[:, rooms_ix] / X[:, households_ix] . population_per_household = X[:, population_ix] / X[:, households_ix] . if self.add_bedrooms_per_room: . bedrooms_per_room = X[:, bedrooms_ix] / X[:, rooms_ix] . return np.c_[X, rooms_per_household, population_per_household, . bedrooms_per_room] . else: . return np.c_[X, rooms_per_household, population_per_household] . attr_adder = CombinedAttributesAdder(add_bedrooms_per_room=False) . housing_extra_attribs = attr_adder.transform(housing.values) . Feature Scaling . This is required because ML algorithms require the different numerical features to be on similar scales. . | Therefore, it is always a good practice to Scale the Numerical features. . | Min-Max Scaling (Normalization) can be achieved with MinMaxScaler Class. This will cause issues when the data has many outliers. . | Standardization can be achieved through StandardScaler Class. Less affected by outliers. . | . Pipelines . Since there are multiple steps we do as part of Data preprocessing, we should create a pipeline to do these transformations one after the another. . | The output of one becomes input to another and so on. . | A pipeline for numerical attributes can look like below . | . num_pipeline = Pipeline([ . (‘imputer’, SimpleImputer(strategy=“median”)), . (‘attribs_adder’, CombinedAttributesAdder()), . (‘std_scaler’, StandardScaler()), . ]) . We can get the different transformations done for numerical columns as below using the pipeline defined above . Dataframe_Transformed = num_pipeline.fit_transform(Dataframe[numerical attribute list]) | . | We can create a Full Pipeline for all attributes at once also. This would be ideal instead of having separate pipelines for Numericals and Categoricals. . | Below is such an example. We can use ColumnTransformer Class. Remainder keyword is to tell that any columns not covered in the num pipeline or cat pipeline should be passed through. . | . from sklearn.compose import ColumnTransformer . num_attribs = list(dataframe_num) . cat_attribs = list(dataframe_cat) . num_attribs . [‘List of Numeric Attributes’] . cat_attribs . [‘List of Categorical Attributes’] . full_pipeline = ColumnTransformer([ . (“num”, num_pipeline, num_attribs), . (“cat”, OneHotEncoder(), cat_attribs), . ], remainder=‘passthrough’) . Dataframe_AllCols_Prepared = full_pipeline.fit_transform(Dataframe_AllCols) . | The data is now ready to be trained. . | . Evaluate Different Models . Evaluate the different models . | Calculate the cross validations score using K Fold Cross Validation . | Pick the model which best suits the data. . | Save the picked model using joblib.dump(model, ‘&lt;model_name&gt;.pkl’) as a pkl file. . | This can be later reloaded back using joblib.load() . | . Finetune the Model . Finetune the models hyperparameters to finetune the model . | Using GridSearchCV or RandomizedSearchCV classes, we can get the best hyperparameters for the model. . | . Deploy the Model . The model can be deployed on Cloud or can be exposed through a REST API and the model’s predict function can be used to evaluate the output by giving the necessary inputs. . | Note that the test input or any new input has to be transformed using the same data preprocessing pipeline before the model can predict the output using that input. . | . X_test_prepared = full_pipeline.transform(X_test) . final_predictions = final_model.predict(X_test_prepared) .",
            "url": "https://mrg-ai.github.io/blog/2020/09/07/MachineLearning-EndtoEnd-Flow-Summary.html",
            "relUrl": "/2020/09/07/MachineLearning-EndtoEnd-Flow-Summary.html",
            "date": " • Sep 7, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Notebook for ML End to End Project for CA housing data",
            "content": "Initial Data Exploration and Data Splits . Load the data from housings.csv file uploaded to Colab. The original dataset is from https://raw.githubusercontent.com/ageron/handson-ml2/master/datasets/housing/housing.tgz . import pandas as pd import numpy as np . housing = pd.read_csv(&#39;housing.csv&#39;) . head() function shows the first five rows . housing.head() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value ocean_proximity . 0 -122.23 | 37.88 | 41.0 | 880.0 | 129.0 | 322.0 | 126.0 | 8.3252 | 452600.0 | NEAR BAY | . 1 -122.22 | 37.86 | 21.0 | 7099.0 | 1106.0 | 2401.0 | 1138.0 | 8.3014 | 358500.0 | NEAR BAY | . 2 -122.24 | 37.85 | 52.0 | 1467.0 | 190.0 | 496.0 | 177.0 | 7.2574 | 352100.0 | NEAR BAY | . 3 -122.25 | 37.85 | 52.0 | 1274.0 | 235.0 | 558.0 | 219.0 | 5.6431 | 341300.0 | NEAR BAY | . 4 -122.25 | 37.85 | 52.0 | 1627.0 | 280.0 | 565.0 | 259.0 | 3.8462 | 342200.0 | NEAR BAY | . info() function shows description of the data, in particular the total number of rows, each attribute&#8217;s type, and the number of nonnull values. . Note that the total bedrooms has many NULL values. These have to be taken care of later. . housing.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 20640 entries, 0 to 20639 Data columns (total 10 columns): # Column Non-Null Count Dtype -- -- 0 longitude 20640 non-null float64 1 latitude 20640 non-null float64 2 housing_median_age 20640 non-null float64 3 total_rooms 20640 non-null float64 4 total_bedrooms 20433 non-null float64 5 population 20640 non-null float64 6 households 20640 non-null float64 7 median_income 20640 non-null float64 8 median_house_value 20640 non-null float64 9 ocean_proximity 20640 non-null object dtypes: float64(9), object(1) memory usage: 1.6+ MB . lets find the unique values of the categorical column . housing[&quot;ocean_proximity&quot;].value_counts() . &lt;1H OCEAN 9136 INLAND 6551 NEAR OCEAN 2658 NEAR BAY 2290 ISLAND 5 Name: ocean_proximity, dtype: int64 . # lets find some information on numerical columns . housing.describe() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value . count 20640.000000 | 20640.000000 | 20640.000000 | 20640.000000 | 20433.000000 | 20640.000000 | 20640.000000 | 20640.000000 | 20640.000000 | . mean -119.569704 | 35.631861 | 28.639486 | 2635.763081 | 537.870553 | 1425.476744 | 499.539680 | 3.870671 | 206855.816909 | . std 2.003532 | 2.135952 | 12.585558 | 2181.615252 | 421.385070 | 1132.462122 | 382.329753 | 1.899822 | 115395.615874 | . min -124.350000 | 32.540000 | 1.000000 | 2.000000 | 1.000000 | 3.000000 | 1.000000 | 0.499900 | 14999.000000 | . 25% -121.800000 | 33.930000 | 18.000000 | 1447.750000 | 296.000000 | 787.000000 | 280.000000 | 2.563400 | 119600.000000 | . 50% -118.490000 | 34.260000 | 29.000000 | 2127.000000 | 435.000000 | 1166.000000 | 409.000000 | 3.534800 | 179700.000000 | . 75% -118.010000 | 37.710000 | 37.000000 | 3148.000000 | 647.000000 | 1725.000000 | 605.000000 | 4.743250 | 264725.000000 | . max -114.310000 | 41.950000 | 52.000000 | 39320.000000 | 6445.000000 | 35682.000000 | 6082.000000 | 15.000100 | 500001.000000 | . Make sure the mean, median, percentiles are all observed and if required any data modifications have to be done. . To vizualize the numerical columns we can use matplotlib and see the histograms . import matplotlib.pyplot as plt housing.hist(bins=50,figsize=(20,15)) plt.show() . Observe the different values and see if they make sense. If they don&#39;t make sense, then go back and check if its a data error or else if the data values are on a different scale. In the above case, look at the median income and it becomes evident it is probably in so many 100Ks i.e. 200K, 400K and so on.. . Some of the data columns seem to have been capped. Look at housing median value and housing median age. See the last bar. That indicates the values may have been capped. Anything above 52(for age) and 500000k (for value) is capped to those values. This may need to be fixed by either removing such data or collecting proper values without capping. . Scale of different columns are all over the place. We will need to bring them all to same scale. This is Feature Scaling.. . Also, the data distributions are not like a bell curve. It is &quot;tail heavy&quot; in many cases. If possible they will have to be transformed to make the data distribution to be like a bell curve. . Dont do any more data analysis, otherwise you run the risk of &quot;data snooping&quot; bias. Create a test set asap . Split the data into train and test . Lets define a function to split train and test . def split_train_test_random(data, test_ratio): np.random.seed(42) shuffled_indices = np.random.permutation(len(data)) test_set_size = int(len(data) * test_ratio) test_indices = shuffled_indices[:test_set_size] train_indices = shuffled_indices[test_set_size:] return data.iloc[train_indices], data.iloc[test_indices] . call the function above and split the data randomly. Since we used a seed, it will always split the same set of records even if we rerun the code. . random_train, random_test = split_train_test_random(housing, 0.2) . random_train.head() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value ocean_proximity . 14196 -117.03 | 32.71 | 33.0 | 3126.0 | 627.0 | 2300.0 | 623.0 | 3.2596 | 103000.0 | NEAR OCEAN | . 8267 -118.16 | 33.77 | 49.0 | 3382.0 | 787.0 | 1314.0 | 756.0 | 3.8125 | 382100.0 | NEAR OCEAN | . 17445 -120.48 | 34.66 | 4.0 | 1897.0 | 331.0 | 915.0 | 336.0 | 4.1563 | 172600.0 | NEAR OCEAN | . 14265 -117.11 | 32.69 | 36.0 | 1421.0 | 367.0 | 1418.0 | 355.0 | 1.9425 | 93400.0 | NEAR OCEAN | . 2271 -119.80 | 36.78 | 43.0 | 2382.0 | 431.0 | 874.0 | 380.0 | 3.5542 | 96500.0 | INLAND | . random_test.head() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value ocean_proximity . 20046 -119.01 | 36.06 | 25.0 | 1505.0 | NaN | 1392.0 | 359.0 | 1.6812 | 47700.0 | INLAND | . 3024 -119.46 | 35.14 | 30.0 | 2943.0 | NaN | 1565.0 | 584.0 | 2.5313 | 45800.0 | INLAND | . 15663 -122.44 | 37.80 | 52.0 | 3830.0 | NaN | 1310.0 | 963.0 | 3.4801 | 500001.0 | NEAR BAY | . 20484 -118.72 | 34.28 | 17.0 | 3051.0 | NaN | 1705.0 | 495.0 | 5.7376 | 218600.0 | &lt;1H OCEAN | . 9814 -121.93 | 36.62 | 34.0 | 2351.0 | NaN | 1063.0 | 428.0 | 3.7250 | 278000.0 | NEAR OCEAN | . The problem with above approach is that when/if the data is updated with new rows, then the split will change and we do not want that. . If possible, we need to find some unique identifier in the data and use that information to do the splits . Hashing is one such approach . from zlib import crc32 def test_set_check(identifier, test_ratio): return crc32(np.int64(identifier)) &amp; 0xffffffff &lt; test_ratio * 2**32 def split_train_test_by_hash_id(data, test_ratio, id_column): ids = data[id_column] in_test_set = ids.apply(lambda id_: test_set_check(id_, test_ratio)) return data.loc[~in_test_set], data.loc[in_test_set] . The above functions are to create the ids and then split based on ids . However, in the current dataset, we do not have any such unique identifier . We can use row_id of the dataframe, but that is not a good approach since new data can possibly come in between the set of rows and not necessarily get appended always . A better approach is to use Latitude and Longitude in case of this dataset since that will remain unique for a larger span of time. . Below, I am creating a new dataframe and adding a new column and copying the data from housing df . housing_with_id = housing.assign(id=np.nan) . housing_with_id.head() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value ocean_proximity id . 0 -122.23 | 37.88 | 41.0 | 880.0 | 129.0 | 322.0 | 126.0 | 8.3252 | 452600.0 | NEAR BAY | NaN | . 1 -122.22 | 37.86 | 21.0 | 7099.0 | 1106.0 | 2401.0 | 1138.0 | 8.3014 | 358500.0 | NEAR BAY | NaN | . 2 -122.24 | 37.85 | 52.0 | 1467.0 | 190.0 | 496.0 | 177.0 | 7.2574 | 352100.0 | NEAR BAY | NaN | . 3 -122.25 | 37.85 | 52.0 | 1274.0 | 235.0 | 558.0 | 219.0 | 5.6431 | 341300.0 | NEAR BAY | NaN | . 4 -122.25 | 37.85 | 52.0 | 1627.0 | 280.0 | 565.0 | 259.0 | 3.8462 | 342200.0 | NEAR BAY | NaN | . housing_with_id[&quot;id&quot;] = housing[&quot;longitude&quot;] * 1000 + housing[&quot;latitude&quot;] . housing_with_id.head() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value ocean_proximity id . 0 -122.23 | 37.88 | 41.0 | 880.0 | 129.0 | 322.0 | 126.0 | 8.3252 | 452600.0 | NEAR BAY | -122192.12 | . 1 -122.22 | 37.86 | 21.0 | 7099.0 | 1106.0 | 2401.0 | 1138.0 | 8.3014 | 358500.0 | NEAR BAY | -122182.14 | . 2 -122.24 | 37.85 | 52.0 | 1467.0 | 190.0 | 496.0 | 177.0 | 7.2574 | 352100.0 | NEAR BAY | -122202.15 | . 3 -122.25 | 37.85 | 52.0 | 1274.0 | 235.0 | 558.0 | 219.0 | 5.6431 | 341300.0 | NEAR BAY | -122212.15 | . 4 -122.25 | 37.85 | 52.0 | 1627.0 | 280.0 | 565.0 | 259.0 | 3.8462 | 342200.0 | NEAR BAY | -122212.15 | . Note - There are other ways to add a column to dataframe. Example below. . housing_with_id_2 = housing . housing_with_id_2[&#39;id&#39;] = housing[&quot;longitude&quot;] * 1000 + housing[&quot;latitude&quot;] . housing_with_id_2.head() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value ocean_proximity id . 0 -122.23 | 37.88 | 41.0 | 880.0 | 129.0 | 322.0 | 126.0 | 8.3252 | 452600.0 | NEAR BAY | -122192.12 | . 1 -122.22 | 37.86 | 21.0 | 7099.0 | 1106.0 | 2401.0 | 1138.0 | 8.3014 | 358500.0 | NEAR BAY | -122182.14 | . 2 -122.24 | 37.85 | 52.0 | 1467.0 | 190.0 | 496.0 | 177.0 | 7.2574 | 352100.0 | NEAR BAY | -122202.15 | . 3 -122.25 | 37.85 | 52.0 | 1274.0 | 235.0 | 558.0 | 219.0 | 5.6431 | 341300.0 | NEAR BAY | -122212.15 | . 4 -122.25 | 37.85 | 52.0 | 1627.0 | 280.0 | 565.0 | 259.0 | 3.8462 | 342200.0 | NEAR BAY | -122212.15 | . hash_train_set, hash_test_set = split_train_test_by_hash_id(housing_with_id, 0.2, &quot;id&quot;) . hash_train_set.head() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value ocean_proximity id . 0 -122.23 | 37.88 | 41.0 | 880.0 | 129.0 | 322.0 | 126.0 | 8.3252 | 452600.0 | NEAR BAY | -122192.12 | . 1 -122.22 | 37.86 | 21.0 | 7099.0 | 1106.0 | 2401.0 | 1138.0 | 8.3014 | 358500.0 | NEAR BAY | -122182.14 | . 2 -122.24 | 37.85 | 52.0 | 1467.0 | 190.0 | 496.0 | 177.0 | 7.2574 | 352100.0 | NEAR BAY | -122202.15 | . 3 -122.25 | 37.85 | 52.0 | 1274.0 | 235.0 | 558.0 | 219.0 | 5.6431 | 341300.0 | NEAR BAY | -122212.15 | . 4 -122.25 | 37.85 | 52.0 | 1627.0 | 280.0 | 565.0 | 259.0 | 3.8462 | 342200.0 | NEAR BAY | -122212.15 | . Sklearn has libraries for splitting. Below is the most common one. . from sklearn.model_selection import train_test_split . train_set, test_set = train_test_split(data, test_size=0.2, random_state=42) . . All the above splits were done randomly. . But, many times, we have to pick test data from different examples in the data. . For example, in this dataset, we have to make sure that test set also contains low median income rows. We cannot be sure of it if the split is random. . In such cases, we create new columns which can create a Category column which creates such groups in the data. . pd.cut is useful for this. . https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.cut.html . housing[&quot;income_cat&quot;] = pd.cut(housing[&quot;median_income&quot;], bins=[0., 1.5, 3.0, 4.5, 6., np.inf], labels=[1, 2, 3, 4, 5]) . housing.head() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value ocean_proximity id income_cat . 0 -122.23 | 37.88 | 41.0 | 880.0 | 129.0 | 322.0 | 126.0 | 8.3252 | 452600.0 | NEAR BAY | -122192.12 | 5 | . 1 -122.22 | 37.86 | 21.0 | 7099.0 | 1106.0 | 2401.0 | 1138.0 | 8.3014 | 358500.0 | NEAR BAY | -122182.14 | 5 | . 2 -122.24 | 37.85 | 52.0 | 1467.0 | 190.0 | 496.0 | 177.0 | 7.2574 | 352100.0 | NEAR BAY | -122202.15 | 5 | . 3 -122.25 | 37.85 | 52.0 | 1274.0 | 235.0 | 558.0 | 219.0 | 5.6431 | 341300.0 | NEAR BAY | -122212.15 | 4 | . 4 -122.25 | 37.85 | 52.0 | 1627.0 | 280.0 | 565.0 | 259.0 | 3.8462 | 342200.0 | NEAR BAY | -122212.15 | 3 | . housing[&quot;income_cat&quot;].hist() . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f330fdb2278&gt; . As we can see in the histogram, there are very few rows of data for low income category and a random split can create a bias for that. . We have used the &quot;strata&quot; of the incomes and we will use this info to split data by taking samples from each strata . from sklearn.model_selection import StratifiedShuffleSplit split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42) for train_index, test_index in split.split(housing, housing[&quot;income_cat&quot;]): strat_train_set = housing.loc[train_index] strat_test_set = housing.loc[test_index] . strat_test_set[&quot;income_cat&quot;].value_counts() / len(strat_test_set) . 3 0.350533 2 0.318798 4 0.176357 5 0.114583 1 0.039729 Name: income_cat, dtype: float64 . strat_train_set[&quot;income_cat&quot;].value_counts() / len(strat_test_set) . 3 1.402374 2 1.275436 4 0.705184 5 0.457607 1 0.159399 Name: income_cat, dtype: float64 . housing[&quot;income_cat&quot;].value_counts() / len(housing) . 3 0.350581 2 0.318847 4 0.176308 5 0.114438 1 0.039826 Name: income_cat, dtype: float64 . As seen above, the data distribution is good across all income groups . We now remove the income category since it is no longer needed. . for set_ in (strat_train_set, strat_test_set): set_.drop(&quot;income_cat&quot;, axis=1, inplace=True) . Data vizualizations after the data split . housing_train = strat_train_set.copy() . made a copy of the train data and calling it housing_train . Lets look at some viz of the data. . Geographical data is first since we have it.. . housing_train.plot(kind=&#39;scatter&#39;, x= &#39;longitude&#39;, y=&#39;latitude&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f33103332b0&gt; . alpha parameter is used to change the transparency. . The darker regions indicate that there are overlapping scatter plots in those regions which in turn indicates data density. . housing_train.plot(kind=&#39;scatter&#39;, x= &#39;longitude&#39;, y=&#39;latitude&#39;, alpha=0.1) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f3310324f98&gt; . Lets plot other columns . s option is the size of circles . c is for color . cmap is for color map. jet color map is used. . housing_train.plot(kind=&quot;scatter&quot;, x=&quot;longitude&quot;, y=&quot;latitude&quot;, alpha=0.4, s=housing_train[&quot;population&quot;]/100, label=&quot;population&quot;, figsize=(10,7), c=&quot;median_house_value&quot;, cmap=plt.get_cmap(&quot;jet&quot;), colorbar=True, ) plt.legend() . &lt;matplotlib.legend.Legend at 0x7f3310960b00&gt; . We can also look for correlations between different columns. . This works if the dataset is small . housing_train.drop(&quot;id&quot;, axis=1, inplace=True) . We will drop the id column since it is no longer needed. . corr_matrix = housing_train.corr() . print(corr_matrix) . longitude latitude ... median_income median_house_value longitude 1.000000 -0.924478 ... -0.019583 -0.047432 latitude -0.924478 1.000000 ... -0.075205 -0.142724 housing_median_age -0.105848 0.005766 ... -0.111360 0.114110 total_rooms 0.048871 -0.039184 ... 0.200087 0.135097 total_bedrooms 0.076598 -0.072419 ... -0.009740 0.047689 population 0.108030 -0.115222 ... 0.002380 -0.026920 households 0.063070 -0.077647 ... 0.010781 0.064506 median_income -0.019583 -0.075205 ... 1.000000 0.687160 median_house_value -0.047432 -0.142724 ... 0.687160 1.000000 [9 rows x 9 columns] . corr_matrix[&#39;median_house_value&#39;] . longitude -0.047432 latitude -0.142724 housing_median_age 0.114110 total_rooms 0.135097 total_bedrooms 0.047689 population -0.026920 households 0.064506 median_income 0.687160 median_house_value 1.000000 Name: median_house_value, dtype: float64 . housing_train.head() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value ocean_proximity . 17606 -121.89 | 37.29 | 38.0 | 1568.0 | 351.0 | 710.0 | 339.0 | 2.7042 | 286600.0 | &lt;1H OCEAN | . 18632 -121.93 | 37.05 | 14.0 | 679.0 | 108.0 | 306.0 | 113.0 | 6.4214 | 340600.0 | &lt;1H OCEAN | . 14650 -117.20 | 32.77 | 31.0 | 1952.0 | 471.0 | 936.0 | 462.0 | 2.8621 | 196900.0 | NEAR OCEAN | . 3230 -119.61 | 36.31 | 25.0 | 1847.0 | 371.0 | 1460.0 | 353.0 | 1.8839 | 46300.0 | INLAND | . 3555 -118.59 | 34.23 | 17.0 | 6592.0 | 1525.0 | 4459.0 | 1463.0 | 3.0347 | 254500.0 | &lt;1H OCEAN | . Another thing to look out is whether we can create new attributes from existing attributes. . Sometimes new attributes that we create will correlate much better to the dependent variable that we want to predict. . Most of the times, date columns can be split to make new columns like Year, Month, Day, Week, MonthEnd, QuarterEnd etc. . In this dataset we do not have any Date attribute though. . Below is datepart function taken from fastai library . This function converts a column of df from a datetime64 to many columns containing the information from the date. . This applies changes inplace. . Parameters: -- df: A pandas data frame. df gain several new columns. fldname: A string that is the name of the date column you wish to expand. If it is not a datetime64 series, it will be converted to one with pd.to_datetime. drop: If true then the original date column will be removed. time: If true time features: Hour, Minute, Second will be added. Examples: . df = pd.DataFrame({ &#39;A&#39; :pd.to_datetime([&#39;3/11/2000&#39;, &#39;3/12/2000&#39;, &#39;3/13/2000&#39;], infer_datetime_format=False) }) &gt;&gt;&gt; df . A 0 2000-03-11 1 2000-03-12 2 2000-03-13 &gt;&gt;&gt; add_datepart(df, &#39;A&#39;) &gt;&gt;&gt; df AYear AMonth AWeek ADay ADayofweek ADayofyear AIs_month_end AIs_month_start AIs_quarter_end AIs_quarter_start AIs_year_end AIs_year_start AElapsed 0 2000 3 10 11 5 71 False False False False False False 952732800 1 2000 3 10 12 6 72 False False False False False False 952819200 2 2000 3 11 13 0 73 False False False False False False 952905600 . def add_datepart(df, fldname, drop=True, time=False): fld = df[fldname] if not np.issubdtype(fld.dtype, np.datetime64): df[fldname] = fld = pd.to_datetime(fld, infer_datetime_format=True) targ_pre = re.sub(&#39;[Dd]ate$&#39;, &#39;&#39;, fldname) attr = [&#39;Year&#39;, &#39;Month&#39;, &#39;Week&#39;, &#39;Day&#39;, &#39;Dayofweek&#39;, &#39;Dayofyear&#39;, &#39;Is_month_end&#39;, &#39;Is_month_start&#39;, &#39;Is_quarter_end&#39;, &#39;Is_quarter_start&#39;, &#39;Is_year_end&#39;, &#39;Is_year_start&#39;] if time: attr = attr + [&#39;Hour&#39;, &#39;Minute&#39;, &#39;Second&#39;] for n in attr: df[targ_pre + n] = getattr(fld.dt, n.lower()) df[targ_pre + &#39;Elapsed&#39;] = fld.astype(np.int64) // 10 ** 9 if drop: df.drop(fldname, axis=1, inplace=True) . Data Cleanup and transformations . Before we start with cleanup, lets copy the training data set after removing the independent variable. . The independent variable is copied to a label dataframe. . housing_labels = housing_train[&quot;median_house_value&quot;].copy() . The labels will be useful later when we run the ML models and evaluate the outputs and compare with these labels. . We will drop these labels from training data since we already saved it in housing_labels . housing_train = housing_train.drop(&quot;median_house_value&quot;, axis=1) . We will also need to do Data Cleanup. . Typical cleanups are Null cleanups . We can either remove such rows, remove those features or add some default value i.e. dropna, drop, fillna respectively . Sklearn provides an Imputer class for this. Generally we fill the nulls with median or mean value. . The strategy that you pass to the imputer should be based on that decision . from sklearn.impute import SimpleImputer imputer = SimpleImputer(strategy=&quot;median&quot;) . SimpleImputer Class works on DFs which only have numbers. So, we drop the categorical column for now . housing_num = housing_train.drop(&quot;ocean_proximity&quot;, axis=1) . We can see below that housing_num only has number columns . housing_num.head() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income . 17606 -121.89 | 37.29 | 38.0 | 1568.0 | 351.0 | 710.0 | 339.0 | 2.7042 | . 18632 -121.93 | 37.05 | 14.0 | 679.0 | 108.0 | 306.0 | 113.0 | 6.4214 | . 14650 -117.20 | 32.77 | 31.0 | 1952.0 | 471.0 | 936.0 | 462.0 | 2.8621 | . 3230 -119.61 | 36.31 | 25.0 | 1847.0 | 371.0 | 1460.0 | 353.0 | 1.8839 | . 3555 -118.59 | 34.23 | 17.0 | 6592.0 | 1525.0 | 4459.0 | 1463.0 | 3.0347 | . imputer.fit(housing_num) . SimpleImputer(add_indicator=False, copy=True, fill_value=None, missing_values=nan, strategy=&#39;median&#39;, verbose=0) . housing_num.median().values . array([-118.51 , 34.26 , 29. , 2119.5 , 433. , 1164. , 408. , 3.5409]) . X = imputer.transform(housing_num) . type(X) . numpy.ndarray . X . array([[-121.89 , 37.29 , 38. , ..., 710. , 339. , 2.7042], [-121.93 , 37.05 , 14. , ..., 306. , 113. , 6.4214], [-117.2 , 32.77 , 31. , ..., 936. , 462. , 2.8621], ..., [-116.4 , 34.09 , 9. , ..., 2098. , 765. , 3.2723], [-118.01 , 33.82 , 31. , ..., 1356. , 356. , 4.0625], [-122.45 , 37.77 , 52. , ..., 1269. , 639. , 3.575 ]]) . We now have to convert this back to Dataframe . housing_tr = pd.DataFrame(X, columns=housing_num.columns, index=housing_num.index) . housing_tr.head() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income . 17606 -121.89 | 37.29 | 38.0 | 1568.0 | 351.0 | 710.0 | 339.0 | 2.7042 | . 18632 -121.93 | 37.05 | 14.0 | 679.0 | 108.0 | 306.0 | 113.0 | 6.4214 | . 14650 -117.20 | 32.77 | 31.0 | 1952.0 | 471.0 | 936.0 | 462.0 | 2.8621 | . 3230 -119.61 | 36.31 | 25.0 | 1847.0 | 371.0 | 1460.0 | 353.0 | 1.8839 | . 3555 -118.59 | 34.23 | 17.0 | 6592.0 | 1525.0 | 4459.0 | 1463.0 | 3.0347 | . type(housing_tr) . pandas.core.frame.DataFrame . We can check if all the NULL values are filled up. . housing_tr.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 16512 entries, 17606 to 15775 Data columns (total 8 columns): # Column Non-Null Count Dtype -- -- 0 longitude 16512 non-null float64 1 latitude 16512 non-null float64 2 housing_median_age 16512 non-null float64 3 total_rooms 16512 non-null float64 4 total_bedrooms 16512 non-null float64 5 population 16512 non-null float64 6 households 16512 non-null float64 7 median_income 16512 non-null float64 dtypes: float64(8) memory usage: 1.1 MB . Lets deal with the categorical column now. . Handle Categorical Attributes . housing_cat = housing_train[[&quot;ocean_proximity&quot;]] . type(housing_cat) . pandas.core.frame.DataFrame . Below 2 cells are to just show why we needed double square brackets in above cells when we created housing_cat . housing_cat2= housing_train[&#39;ocean_proximity&#39;] . type(housing_cat2) . pandas.core.series.Series . We now have to convert the categorical values to numbers since most ML algorithms can use only numbers . There are many classes in sklearn which we can use for this. These are transformer classes. . Ordinal Encoder | One Hot Encoder | Custom Transformer (user has to write it) | from sklearn.preprocessing import OrdinalEncoder ordinal_encoder = OrdinalEncoder() housing_cat_encoded = ordinal_encoder.fit_transform(housing_cat) . type(housing_cat_encoded) . numpy.ndarray . print(housing_cat_encoded.tolist()) . [[0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [3.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [3.0], [3.0], [3.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [0.0], [1.0], [1.0], [4.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [4.0], [1.0], [0.0], [3.0], [0.0], [0.0], [3.0], [0.0], [1.0], [3.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [1.0], [1.0], [3.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [4.0], [3.0], [1.0], [0.0], [0.0], [4.0], [1.0], [1.0], [4.0], [0.0], [4.0], [3.0], [0.0], [1.0], [1.0], [4.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [3.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [3.0], [1.0], [1.0], [3.0], [0.0], [4.0], [4.0], [3.0], [4.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [3.0], [4.0], [4.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [3.0], [1.0], [3.0], [1.0], [0.0], [4.0], [1.0], [4.0], [0.0], [0.0], [0.0], [1.0], [3.0], [1.0], [1.0], [1.0], [0.0], [3.0], [0.0], [0.0], [4.0], [3.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [4.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [3.0], [3.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [3.0], [4.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [3.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [3.0], [4.0], [1.0], [4.0], [1.0], [1.0], [4.0], [4.0], [0.0], [4.0], [0.0], [3.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [3.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [3.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [3.0], [1.0], [3.0], [1.0], [4.0], [4.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [4.0], [1.0], [4.0], [3.0], [0.0], [1.0], [0.0], [1.0], [0.0], [3.0], [4.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [4.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [3.0], [3.0], [1.0], [0.0], [1.0], [3.0], [1.0], [1.0], [1.0], [1.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [3.0], [4.0], [4.0], [4.0], [1.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [1.0], [0.0], [3.0], [0.0], [4.0], [1.0], [1.0], [4.0], [1.0], [0.0], [4.0], [0.0], [1.0], [3.0], [3.0], [0.0], [1.0], [4.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [1.0], [0.0], [3.0], [3.0], [0.0], [0.0], [1.0], [0.0], [3.0], [3.0], [4.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [3.0], [4.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [3.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [4.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [4.0], [4.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [3.0], [0.0], [4.0], [1.0], [0.0], [0.0], [4.0], [3.0], [0.0], [0.0], [0.0], [4.0], [4.0], [1.0], [3.0], [0.0], [1.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [3.0], [4.0], [0.0], [4.0], [0.0], [3.0], [0.0], [0.0], [3.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [4.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [3.0], [4.0], [1.0], [4.0], [1.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [3.0], [1.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [4.0], [1.0], [3.0], [0.0], [3.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [3.0], [1.0], [3.0], [1.0], [4.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [3.0], [0.0], [4.0], [1.0], [1.0], [1.0], [4.0], [4.0], [1.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [3.0], [1.0], [1.0], [3.0], [1.0], [3.0], [3.0], [1.0], [0.0], [1.0], [4.0], [1.0], [4.0], [1.0], [3.0], [1.0], [4.0], [1.0], [4.0], [4.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [3.0], [3.0], [1.0], [0.0], [3.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [3.0], [0.0], [4.0], [0.0], [3.0], [1.0], [3.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [3.0], [0.0], [0.0], [4.0], [1.0], [0.0], [3.0], [4.0], [3.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [3.0], [1.0], [3.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [3.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [3.0], [3.0], [4.0], [1.0], [3.0], [1.0], [0.0], [4.0], [3.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [3.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [3.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [3.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [3.0], [0.0], [3.0], [1.0], [0.0], [3.0], [3.0], [1.0], [0.0], [3.0], [4.0], [1.0], [3.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [3.0], [3.0], [1.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [4.0], [4.0], [1.0], [0.0], [3.0], [1.0], [4.0], [0.0], [1.0], [1.0], [4.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [4.0], [0.0], [3.0], [3.0], [3.0], [1.0], [1.0], [0.0], [3.0], [1.0], [3.0], [1.0], [3.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [4.0], [1.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [3.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [4.0], [0.0], [4.0], [1.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [3.0], [4.0], [0.0], [3.0], [1.0], [0.0], [3.0], [0.0], [4.0], [3.0], [4.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [4.0], [3.0], [0.0], [0.0], [4.0], [3.0], [1.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [1.0], [1.0], [1.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [3.0], [3.0], [4.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [3.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [3.0], [0.0], [1.0], [4.0], [3.0], [0.0], [3.0], [4.0], [3.0], [1.0], [1.0], [0.0], [4.0], [1.0], [0.0], [1.0], [4.0], [4.0], [1.0], [3.0], [1.0], [3.0], [4.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [3.0], [1.0], [3.0], [1.0], [4.0], [4.0], [4.0], [1.0], [1.0], [1.0], [4.0], [1.0], [4.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [3.0], [4.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [4.0], [1.0], [1.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [3.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [4.0], [0.0], [4.0], [0.0], [1.0], [3.0], [4.0], [3.0], [3.0], [1.0], [1.0], [3.0], [3.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [3.0], [3.0], [4.0], [1.0], [4.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [3.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [1.0], [0.0], [4.0], [3.0], [1.0], [1.0], [3.0], [1.0], [3.0], [0.0], [1.0], [1.0], [0.0], [1.0], [4.0], [0.0], [4.0], [1.0], [4.0], [0.0], [3.0], [4.0], [1.0], [0.0], [4.0], [0.0], [1.0], [3.0], [3.0], [3.0], [0.0], [0.0], [1.0], [4.0], [3.0], [4.0], [1.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [1.0], [3.0], [0.0], [3.0], [0.0], [3.0], [4.0], [1.0], [0.0], [1.0], [1.0], [4.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [3.0], [1.0], [3.0], [0.0], [1.0], [1.0], [3.0], [1.0], [4.0], [4.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [4.0], [4.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [4.0], [0.0], [1.0], [1.0], [0.0], [1.0], [3.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [4.0], [0.0], [0.0], [3.0], [1.0], [3.0], [0.0], [4.0], [1.0], [3.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [4.0], [1.0], [3.0], [3.0], [1.0], [3.0], [1.0], [4.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [4.0], [1.0], [1.0], [0.0], [0.0], [3.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [1.0], [4.0], [1.0], [0.0], [3.0], [0.0], [3.0], [3.0], [4.0], [1.0], [1.0], [1.0], [4.0], [1.0], [1.0], [0.0], [1.0], [1.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [4.0], [0.0], [3.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [4.0], [4.0], [0.0], [3.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [3.0], [4.0], [0.0], [3.0], [1.0], [0.0], [1.0], [1.0], [3.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [1.0], [4.0], [4.0], [0.0], [0.0], [4.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [3.0], [4.0], [4.0], [3.0], [4.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [3.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [4.0], [3.0], [4.0], [1.0], [1.0], [4.0], [4.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [3.0], [4.0], [1.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [4.0], [4.0], [1.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [3.0], [1.0], [1.0], [4.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [4.0], [3.0], [3.0], [1.0], [1.0], [4.0], [3.0], [4.0], [0.0], [1.0], [3.0], [4.0], [4.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [0.0], [3.0], [1.0], [1.0], [1.0], [0.0], [1.0], [4.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [1.0], [3.0], [1.0], [1.0], [3.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [3.0], [4.0], [0.0], [4.0], [1.0], [1.0], [0.0], [4.0], [0.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [3.0], [1.0], [4.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [4.0], [4.0], [0.0], [1.0], [1.0], [1.0], [0.0], [4.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [3.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [3.0], [1.0], [3.0], [3.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [4.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [1.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [4.0], [1.0], [0.0], [1.0], [4.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [4.0], [0.0], [1.0], [4.0], [4.0], [1.0], [0.0], [3.0], [0.0], [3.0], [1.0], [1.0], [4.0], [1.0], [0.0], [0.0], [3.0], [3.0], [0.0], [0.0], [4.0], [1.0], [1.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [3.0], [1.0], [3.0], [4.0], [4.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [0.0], [3.0], [1.0], [3.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [4.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [3.0], [1.0], [0.0], [4.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [3.0], [1.0], [0.0], [3.0], [4.0], [0.0], [3.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [4.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [1.0], [3.0], [1.0], [1.0], [1.0], [0.0], [3.0], [1.0], [1.0], [0.0], [4.0], [4.0], [1.0], [1.0], [1.0], [0.0], [3.0], [1.0], [4.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [1.0], [1.0], [0.0], [3.0], [3.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [3.0], [3.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [4.0], [1.0], [4.0], [1.0], [3.0], [4.0], [0.0], [4.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [3.0], [1.0], [1.0], [0.0], [1.0], [0.0], [4.0], [1.0], [3.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [3.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [1.0], [3.0], [1.0], [0.0], [3.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [3.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [4.0], [4.0], [1.0], [1.0], [4.0], [1.0], [4.0], [1.0], [1.0], [4.0], [1.0], [1.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [4.0], [1.0], [1.0], [1.0], [3.0], [3.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [0.0], [1.0], [4.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [3.0], [3.0], [3.0], [1.0], [0.0], [0.0], [4.0], [3.0], [0.0], [0.0], [0.0], [3.0], [4.0], [4.0], [4.0], [1.0], [4.0], [1.0], [1.0], [0.0], [3.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [1.0], [1.0], [0.0], [0.0], [0.0], [3.0], [1.0], [3.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [3.0], [1.0], [0.0], [4.0], [0.0], [3.0], [1.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [3.0], [1.0], [0.0], [3.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [3.0], [1.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [3.0], [0.0], [4.0], [0.0], [0.0], [0.0], [4.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [1.0], [3.0], [1.0], [4.0], [4.0], [0.0], [1.0], [0.0], [3.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [4.0], [3.0], [0.0], [1.0], [4.0], [3.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [3.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [3.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [1.0], [1.0], [4.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [1.0], [1.0], [3.0], [1.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [3.0], [3.0], [0.0], [4.0], [1.0], [3.0], [0.0], [1.0], [3.0], [0.0], [3.0], [4.0], [1.0], [3.0], [0.0], [3.0], [0.0], [3.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [4.0], [3.0], [3.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [4.0], [1.0], [0.0], [0.0], [3.0], [0.0], [3.0], [0.0], [0.0], [0.0], [4.0], [1.0], [1.0], [1.0], [0.0], [4.0], [0.0], [4.0], [1.0], [1.0], [0.0], [4.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [4.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [3.0], [0.0], [1.0], [4.0], [4.0], [1.0], [3.0], [0.0], [0.0], [1.0], [1.0], [3.0], [4.0], [4.0], [4.0], [0.0], [1.0], [4.0], [4.0], [4.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [3.0], [1.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [4.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [3.0], [3.0], [0.0], [1.0], [1.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [4.0], [3.0], [1.0], [4.0], [1.0], [0.0], [1.0], [1.0], [3.0], [0.0], [3.0], [1.0], [1.0], [3.0], [1.0], [3.0], [0.0], [3.0], [1.0], [0.0], [4.0], [1.0], [0.0], [1.0], [4.0], [3.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [4.0], [3.0], [0.0], [0.0], [4.0], [0.0], [3.0], [3.0], [0.0], [4.0], [0.0], [4.0], [3.0], [0.0], [0.0], [1.0], [1.0], [1.0], [4.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [4.0], [3.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [4.0], [4.0], [0.0], [4.0], [0.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [3.0], [3.0], [3.0], [3.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [3.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [3.0], [0.0], [3.0], [1.0], [1.0], [4.0], [1.0], [1.0], [0.0], [3.0], [4.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [3.0], [1.0], [1.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [3.0], [1.0], [1.0], [1.0], [3.0], [0.0], [0.0], [0.0], [4.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [4.0], [0.0], [1.0], [4.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [4.0], [0.0], [0.0], [3.0], [3.0], [3.0], [0.0], [1.0], [4.0], [1.0], [0.0], [4.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [4.0], [3.0], [0.0], [3.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [4.0], [1.0], [0.0], [3.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [3.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [0.0], [3.0], [3.0], [4.0], [4.0], [1.0], [1.0], [0.0], [1.0], [1.0], [3.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [1.0], [1.0], [3.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [4.0], [3.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [3.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [3.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [4.0], [0.0], [1.0], [1.0], [1.0], [1.0], [3.0], [0.0], [4.0], [4.0], [1.0], [1.0], [0.0], [0.0], [1.0], [4.0], [1.0], [1.0], [1.0], [4.0], [4.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [3.0], [4.0], [4.0], [1.0], [0.0], [0.0], [3.0], [1.0], [0.0], [1.0], [1.0], [4.0], [1.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [1.0], [1.0], [3.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [3.0], [4.0], [4.0], [0.0], [4.0], [1.0], [0.0], [3.0], [0.0], [1.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [4.0], [1.0], [3.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [3.0], [1.0], [1.0], [0.0], [4.0], [4.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [4.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [3.0], [4.0], [3.0], [0.0], [4.0], [4.0], [1.0], [3.0], [3.0], [4.0], [1.0], [0.0], [4.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [4.0], [4.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [3.0], [4.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [3.0], [1.0], [0.0], [1.0], [1.0], [3.0], [0.0], [0.0], [1.0], [4.0], [1.0], [1.0], [1.0], [3.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [3.0], [4.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [4.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [3.0], [0.0], [0.0], [1.0], [3.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [1.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [4.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [3.0], [3.0], [4.0], [1.0], [1.0], [1.0], [0.0], [1.0], [3.0], [3.0], [0.0], [1.0], [3.0], [0.0], [3.0], [4.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [3.0], [1.0], [3.0], [1.0], [0.0], [0.0], [4.0], [0.0], [4.0], [4.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [4.0], [1.0], [1.0], [0.0], [0.0], [3.0], [1.0], [1.0], [1.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [3.0], [1.0], [1.0], [1.0], [0.0], [0.0], [4.0], [1.0], [1.0], [4.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [3.0], [0.0], [1.0], [4.0], [0.0], [1.0], [3.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [4.0], [1.0], [3.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [3.0], [4.0], [4.0], [4.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [3.0], [3.0], [4.0], [1.0], [1.0], [0.0], [1.0], [0.0], [4.0], [4.0], [4.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [4.0], [0.0], [1.0], [1.0], [4.0], [0.0], [3.0], [3.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [3.0], [4.0], [0.0], [4.0], [0.0], [4.0], [0.0], [4.0], [3.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [4.0], [4.0], [4.0], [1.0], [1.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [4.0], [3.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [1.0], [1.0], [3.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [4.0], [0.0], [0.0], [3.0], [0.0], [3.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [4.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [4.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [3.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [3.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [0.0], [0.0], [1.0], [3.0], [4.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [3.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [3.0], [3.0], [0.0], [4.0], [3.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [1.0], [4.0], [1.0], [4.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [4.0], [0.0], [3.0], [0.0], [0.0], [3.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [3.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [4.0], [0.0], [3.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [3.0], [4.0], [3.0], [4.0], [0.0], [3.0], [1.0], [1.0], [1.0], [4.0], [1.0], [0.0], [4.0], [0.0], [4.0], [1.0], [3.0], [0.0], [4.0], [4.0], [4.0], [0.0], [1.0], [1.0], [4.0], [1.0], [0.0], [0.0], [3.0], [1.0], [0.0], [4.0], [1.0], [0.0], [1.0], [4.0], [1.0], [1.0], [1.0], [1.0], [4.0], [0.0], [0.0], [4.0], [1.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [4.0], [4.0], [4.0], [1.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [3.0], [4.0], [0.0], [0.0], [4.0], [1.0], [3.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [1.0], [1.0], [4.0], [0.0], [4.0], [0.0], [4.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [4.0], [0.0], [3.0], [1.0], [0.0], [3.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [1.0], [3.0], [0.0], [3.0], [0.0], [4.0], [1.0], [0.0], [0.0], [4.0], [1.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [3.0], [1.0], [0.0], [3.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [4.0], [4.0], [0.0], [0.0], [0.0], [1.0], [3.0], [1.0], [4.0], [3.0], [3.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [4.0], [4.0], [1.0], [4.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [4.0], [1.0], [1.0], [0.0], [0.0], [4.0], [3.0], [3.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [4.0], [0.0], [4.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [1.0], [3.0], [4.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [1.0], [4.0], [3.0], [4.0], [0.0], [4.0], [3.0], [3.0], [3.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [1.0], [3.0], [0.0], [3.0], [0.0], [0.0], [1.0], [3.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [1.0], [0.0], [0.0], [1.0], [3.0], [1.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [3.0], [4.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [3.0], [3.0], [4.0], [1.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [3.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [4.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [4.0], [1.0], [0.0], [3.0], [0.0], [1.0], [4.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [3.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [3.0], [3.0], [3.0], [0.0], [0.0], [3.0], [3.0], [0.0], [4.0], [0.0], [4.0], [3.0], [0.0], [1.0], [1.0], [1.0], [1.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [3.0], [1.0], [4.0], [0.0], [3.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [4.0], [1.0], [4.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [3.0], [4.0], [1.0], [4.0], [0.0], [0.0], [0.0], [4.0], [4.0], [4.0], [0.0], [1.0], [0.0], [0.0], [4.0], [3.0], [0.0], [0.0], [3.0], [4.0], [3.0], [1.0], [0.0], [0.0], [3.0], [4.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [4.0], [0.0], [4.0], [1.0], [1.0], [1.0], [3.0], [1.0], [0.0], [0.0], [1.0], [4.0], [4.0], [0.0], [0.0], [4.0], [3.0], [1.0], [0.0], [1.0], [1.0], [3.0], [3.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [1.0], [1.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [4.0], [3.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [1.0], [0.0], [0.0], [3.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [4.0], [0.0], [3.0], [1.0], [4.0], [3.0], [1.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [4.0], [4.0], [0.0], [3.0], [0.0], [4.0], [3.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [4.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [3.0], [4.0], [1.0], [1.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [3.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [4.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [4.0], [0.0], [4.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [4.0], [0.0], [1.0], [3.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [4.0], [1.0], [0.0], [4.0], [4.0], [3.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [3.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [1.0], [3.0], [1.0], [0.0], [3.0], [0.0], [3.0], [1.0], [4.0], [4.0], [4.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [4.0], [0.0], [1.0], [0.0], [1.0], [4.0], [4.0], [3.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [4.0], [0.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [3.0], [3.0], [3.0], [0.0], [0.0], [1.0], [4.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [4.0], [3.0], [1.0], [3.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [3.0], [0.0], [1.0], [0.0], [3.0], [1.0], [3.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [4.0], [1.0], [1.0], [3.0], [4.0], [0.0], [1.0], [1.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [1.0], [0.0], [3.0], [0.0], [1.0], [1.0], [4.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [3.0], [4.0], [3.0], [0.0], [0.0], [3.0], [1.0], [3.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [3.0], [1.0], [4.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [4.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [3.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [4.0], [3.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [4.0], [0.0], [4.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [4.0], [3.0], [3.0], [0.0], [0.0], [4.0], [1.0], [3.0], [1.0], [0.0], [1.0], [3.0], [4.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [0.0], [4.0], [1.0], [3.0], [0.0], [0.0], [4.0], [3.0], [0.0], [0.0], [4.0], [3.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [4.0], [1.0], [0.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [4.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [4.0], [1.0], [4.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [3.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [4.0], [3.0], [0.0], [1.0], [1.0], [1.0], [3.0], [4.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [4.0], [3.0], [0.0], [4.0], [3.0], [1.0], [0.0], [1.0], [0.0], [4.0], [3.0], [0.0], [4.0], [4.0], [3.0], [3.0], [1.0], [1.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [1.0], [1.0], [3.0], [0.0], [4.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [3.0], [1.0], [0.0], [1.0], [4.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [3.0], [4.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [4.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [4.0], [4.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [1.0], [1.0], [0.0], [4.0], [0.0], [4.0], [1.0], [0.0], [1.0], [4.0], [0.0], [3.0], [4.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [3.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [3.0], [0.0], [3.0], [3.0], [1.0], [1.0], [3.0], [0.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [3.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [1.0], [4.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [3.0], [0.0], [4.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [3.0], [3.0], [4.0], [0.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [3.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [3.0], [1.0], [4.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [3.0], [1.0], [4.0], [3.0], [0.0], [0.0], [4.0], [4.0], [0.0], [0.0], [3.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [3.0], [3.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [4.0], [3.0], [0.0], [3.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [4.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [4.0], [4.0], [3.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [3.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [3.0], [3.0], [0.0], [1.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [4.0], [1.0], [4.0], [0.0], [0.0], [1.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [4.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [4.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [4.0], [1.0], [1.0], [4.0], [3.0], [0.0], [0.0], [0.0], [0.0], [3.0], [3.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [3.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [3.0], [1.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [4.0], [0.0], [1.0], [1.0], [3.0], [3.0], [0.0], [0.0], [3.0], [0.0], [1.0], [4.0], [0.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [3.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [3.0], [0.0], [1.0], [4.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [4.0], [0.0], [1.0], [1.0], [4.0], [4.0], [1.0], [4.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [4.0], [0.0], [0.0], [4.0], [1.0], [3.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [4.0], [4.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [1.0], [4.0], [3.0], [1.0], [4.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [4.0], [4.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [4.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [1.0], [3.0], [4.0], [1.0], [3.0], [3.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [4.0], [3.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [4.0], [4.0], [4.0], [1.0], [0.0], [0.0], [3.0], [1.0], [3.0], [0.0], [4.0], [0.0], [4.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [1.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [4.0], [1.0], [1.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [3.0], [4.0], [3.0], [0.0], [4.0], [3.0], [3.0], [0.0], [3.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [4.0], [4.0], [3.0], [4.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [3.0], [0.0], [4.0], [1.0], [4.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [1.0], [0.0], [4.0], [0.0], [4.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [4.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [4.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [4.0], [0.0], [1.0], [3.0], [0.0], [1.0], [1.0], [4.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [4.0], [4.0], [0.0], [4.0], [0.0], [4.0], [1.0], [1.0], [4.0], [3.0], [0.0], [0.0], [4.0], [0.0], [4.0], [1.0], [4.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [4.0], [0.0], [0.0], [0.0], [1.0], [3.0], [4.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [4.0], [1.0], [3.0], [4.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [4.0], [0.0], [4.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [4.0], [3.0], [0.0], [4.0], [1.0], [3.0], [0.0], [3.0], [0.0], [1.0], [0.0], [1.0], [1.0], [3.0], [1.0], [1.0], [1.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [3.0], [0.0], [1.0], [3.0], [1.0], [0.0], [1.0], [1.0], [3.0], [1.0], [0.0], [3.0], [3.0], [1.0], [4.0], [0.0], [1.0], [1.0], [3.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [3.0], [4.0], [0.0], [0.0], [3.0], [4.0], [4.0], [1.0], [0.0], [4.0], [0.0], [1.0], [4.0], [0.0], [4.0], [1.0], [0.0], [1.0], [3.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [4.0], [3.0], [0.0], [0.0], [1.0], [3.0], [1.0], [0.0], [1.0], [0.0], [1.0], [4.0], [0.0], [3.0], [0.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [0.0], [1.0], [3.0], [1.0], [4.0], [0.0], [0.0], [4.0], [4.0], [1.0], [3.0], [1.0], [1.0], [4.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [4.0], [3.0], [3.0], [3.0], [4.0], [0.0], [0.0], [1.0], [3.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [3.0], [4.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [4.0], [0.0], [1.0], [1.0], [0.0], [1.0], [3.0], [0.0], [3.0], [1.0], [0.0], [1.0], [4.0], [0.0], [3.0], [0.0], [0.0], [1.0], [3.0], [0.0], [4.0], [0.0], [0.0], [1.0], [4.0], [4.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [3.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [4.0], [3.0], [0.0], [0.0], [0.0], [3.0], [0.0], [4.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [3.0], [1.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [3.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [3.0], [0.0], [4.0], [1.0], [0.0], [1.0], [1.0], [4.0], [3.0], [3.0], [1.0], [1.0], [0.0], [1.0], [3.0], [4.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [1.0], [4.0], [4.0], [1.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [3.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [4.0], [3.0], [0.0], [0.0], [4.0], [1.0], [4.0], [3.0], [0.0], [0.0], [3.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [3.0], [1.0], [1.0], [4.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [3.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [1.0], [1.0], [1.0], [3.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [4.0], [3.0], [0.0], [1.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [3.0], [4.0], [3.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [3.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [3.0], [1.0], [4.0], [0.0], [4.0], [0.0], [1.0], [1.0], [4.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [4.0], [3.0], [0.0], [4.0], [1.0], [4.0], [1.0], [0.0], [0.0], [3.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [4.0], [2.0], [4.0], [1.0], [3.0], [3.0], [3.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [3.0], [1.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [3.0], [4.0], [1.0], [1.0], [4.0], [1.0], [0.0], [3.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [1.0], [4.0], [1.0], [4.0], [4.0], [0.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [4.0], [3.0], [0.0], [0.0], [4.0], [4.0], [1.0], [1.0], [3.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [1.0], [3.0], [3.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [1.0], [3.0], [0.0], [3.0], [1.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [3.0], [1.0], [3.0], [0.0], [3.0], [0.0], [1.0], [4.0], [3.0], [3.0], [3.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [4.0], [1.0], [0.0], [3.0], [1.0], [0.0], [3.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [0.0], [4.0], [1.0], [4.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [3.0], [0.0], [4.0], [1.0], [0.0], [0.0], [3.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [4.0], [0.0], [3.0], [1.0], [4.0], [0.0], [0.0], [3.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [4.0], [1.0], [4.0], [0.0], [3.0], [1.0], [0.0], [1.0], [4.0], [1.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [0.0], [0.0], [3.0], [1.0], [0.0], [1.0], [0.0], [0.0], [3.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [3.0], [0.0], [4.0], [3.0], [1.0], [1.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [3.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [3.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [3.0], [1.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [3.0], [1.0], [1.0], [1.0], [0.0], [4.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [3.0], [0.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [3.0], [4.0], [1.0], [4.0], [4.0], [1.0], [0.0], [4.0], [4.0], [1.0], [0.0], [0.0], [3.0], [4.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [3.0], [1.0], [1.0], [4.0], [0.0], [4.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [4.0], [3.0], [1.0], [1.0], [3.0], [1.0], [0.0], [1.0], [3.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [4.0], [0.0], [3.0], [0.0], [3.0], [4.0], [1.0], [3.0], [1.0], [0.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [3.0], [4.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [4.0], [1.0], [3.0], [1.0], [4.0], [1.0], [1.0], [1.0], [4.0], [0.0], [4.0], [0.0], [0.0], [1.0], [4.0], [4.0], [1.0], [1.0], [0.0], [1.0], [4.0], [0.0], [3.0], [0.0], [1.0], [3.0], [0.0], [4.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [4.0], [1.0], [1.0], [1.0], [0.0], [4.0], [0.0], [0.0], [3.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [4.0], [3.0], [4.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [4.0], [0.0], [3.0], [3.0], [0.0], [0.0], [3.0], [3.0], [1.0], [1.0], [4.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [3.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [1.0], [0.0], [4.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [3.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [1.0], [4.0], [4.0], [1.0], [0.0], [1.0], [4.0], [4.0], [0.0], [0.0], [0.0], [3.0], [1.0], [1.0], [3.0], [1.0], [4.0], [0.0], [1.0], [0.0], [4.0], [4.0], [0.0], [4.0], [1.0], [1.0], [4.0], [4.0], [1.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [0.0], [4.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [3.0], [4.0], [1.0], [3.0], [4.0], [0.0], [0.0], [4.0], [1.0], [0.0], [4.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [3.0], [1.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [4.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [3.0], [0.0], [1.0], [0.0], [3.0], [4.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [3.0], [0.0], [3.0], [3.0], [0.0], [1.0], [0.0], [1.0], [3.0], [0.0], [3.0], [1.0], [4.0], [3.0], [0.0], [1.0], [3.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [3.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [3.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [3.0], [3.0], [0.0], [0.0], [3.0], [1.0], [3.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [3.0], [3.0], [0.0], [3.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [3.0], [3.0], [1.0], [3.0], [1.0], [1.0], [3.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [3.0], [4.0], [4.0], [4.0], [4.0], [1.0], [0.0], [4.0], [0.0], [0.0], [1.0], [3.0], [0.0], [1.0], [3.0], [4.0], [0.0], [1.0], [0.0], [4.0], [1.0], [4.0], [3.0], [0.0], [1.0], [4.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [3.0], [1.0], [1.0], [1.0], [3.0], [1.0], [3.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [3.0], [0.0], [4.0], [4.0], [3.0], [0.0], [1.0], [1.0], [3.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [4.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [3.0], [0.0], [3.0], [3.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [0.0], [0.0], [4.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [3.0], [1.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [3.0], [3.0], [3.0], [1.0], [0.0], [0.0], [3.0], [0.0], [1.0], [1.0], [1.0], [4.0], [1.0], [4.0], [4.0], [3.0], [0.0], [1.0], [1.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [4.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [3.0], [0.0], [1.0], [1.0], [1.0], [4.0], [0.0], [1.0], [1.0], [3.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [4.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [4.0], [1.0], [1.0], [4.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [3.0], [1.0], [0.0], [3.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [3.0], [1.0], [4.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [4.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [3.0], [4.0], [1.0], [1.0], [3.0], [1.0], [0.0], [3.0], [0.0], [0.0], [1.0], [4.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [3.0], [1.0], [4.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [3.0], [0.0], [4.0], [1.0], [0.0], [0.0], [3.0], [0.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [4.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [1.0], [4.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [4.0], [3.0], [1.0], [1.0], [1.0], [4.0], [3.0], [4.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [3.0], [0.0], [4.0], [3.0], [0.0], [0.0], [3.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [3.0], [1.0], [4.0], [4.0], [3.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [3.0], [3.0], [0.0], [3.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [4.0], [4.0], [4.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [1.0], [4.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [3.0], [0.0], [1.0], [1.0], [3.0], [0.0], [0.0], [4.0], [0.0], [1.0], [4.0], [4.0], [3.0], [3.0], [0.0], [4.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [3.0], [1.0], [3.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [4.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [4.0], [1.0], [4.0], [0.0], [0.0], [4.0], [1.0], [3.0], [0.0], [1.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [4.0], [4.0], [3.0], [1.0], [3.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [4.0], [1.0], [1.0], [3.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [1.0], [3.0], [4.0], [0.0], [1.0], [0.0], [4.0], [0.0], [4.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [4.0], [1.0], [1.0], [4.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [4.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [0.0], [4.0], [4.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [4.0], [3.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [3.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [3.0], [3.0], [1.0], [0.0], [4.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [3.0], [4.0], [3.0], [1.0], [1.0], [3.0], [1.0], [4.0], [1.0], [1.0], [4.0], [0.0], [3.0], [1.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [4.0], [3.0], [4.0], [1.0], [0.0], [4.0], [0.0], [4.0], [1.0], [1.0], [1.0], [0.0], [1.0], [3.0], [3.0], [1.0], [4.0], [0.0], [0.0], [1.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [1.0], [1.0], [4.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [3.0], [4.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [4.0], [4.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [4.0], [3.0], [1.0], [0.0], [3.0], [0.0], [0.0], [3.0], [4.0], [4.0], [1.0], [1.0], [1.0], [4.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [4.0], [3.0], [1.0], [0.0], [1.0], [0.0], [3.0], [3.0], [3.0], [0.0], [3.0], [0.0], [3.0], [0.0], [1.0], [4.0], [0.0], [0.0], [3.0], [4.0], [1.0], [0.0], [3.0], [4.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [4.0], [3.0], [1.0], [1.0], [3.0], [0.0], [0.0], [0.0], [1.0], [4.0], [3.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [3.0], [3.0], [4.0], [1.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [4.0], [0.0], [0.0], [3.0], [1.0], [0.0], [1.0], [4.0], [0.0], [3.0], [4.0], [3.0], [4.0], [0.0], [4.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [3.0], [1.0], [0.0], [4.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [3.0], [4.0], [3.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [3.0], [4.0], [1.0], [1.0], [0.0], [4.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [3.0], [0.0], [4.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [4.0], [4.0], [1.0], [0.0], [1.0], [1.0], [4.0], [3.0], [3.0], [1.0], [0.0], [0.0], [0.0], [3.0], [3.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [4.0], [4.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [3.0], [4.0], [0.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [4.0], [3.0], [0.0], [3.0], [1.0], [1.0], [0.0], [4.0], [4.0], [3.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [4.0], [0.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [3.0], [3.0], [3.0], [1.0], [1.0], [1.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [3.0], [4.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [3.0], [1.0], [0.0], [0.0], [1.0], [3.0], [3.0], [3.0], [1.0], [1.0], [4.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [3.0], [4.0], [3.0], [0.0], [3.0], [1.0], [1.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [3.0], [4.0], [4.0], [4.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [3.0], [4.0], [0.0], [4.0], [3.0], [0.0], [1.0], [1.0], [3.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [4.0], [1.0], [4.0], [1.0], [0.0], [1.0], [3.0], [4.0], [4.0], [1.0], [1.0], [3.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [3.0], [1.0], [4.0], [0.0], [1.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [4.0], [3.0], [3.0], [4.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [4.0], [4.0], [4.0], [1.0], [1.0], [1.0], [0.0], [1.0], [3.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [0.0], [3.0], [3.0], [4.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [4.0], [0.0], [0.0], [3.0], [1.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [4.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [3.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [3.0], [3.0], [1.0], [1.0], [1.0], [0.0], [0.0], [4.0], [1.0], [4.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [4.0], [3.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [3.0], [3.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [3.0], [3.0], [3.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [4.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [4.0], [3.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [3.0], [4.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [4.0], [0.0], [1.0], [0.0], [1.0], [1.0], [4.0], [0.0], [3.0], [1.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [3.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [3.0], [4.0], [1.0], [0.0], [0.0], [3.0], [1.0], [1.0], [0.0], [3.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [3.0], [3.0], [0.0], [3.0], [1.0], [1.0], [0.0], [0.0], [3.0], [0.0], [4.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [4.0], [0.0], [1.0], [1.0], [1.0], [3.0], [3.0], [1.0], [0.0], [1.0], [4.0], [0.0], [3.0], [4.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [3.0], [0.0], [1.0], [1.0], [0.0], [4.0], [4.0], [1.0], [3.0], [0.0], [1.0], [1.0], [4.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [3.0], [1.0], [4.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [0.0], [4.0], [0.0], [4.0], [1.0], [1.0], [0.0], [4.0], [4.0], [4.0], [3.0], [1.0], [0.0], [1.0], [0.0], [3.0], [4.0], [0.0], [3.0], [0.0], [1.0], [4.0], [1.0], [1.0], [1.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [3.0], [1.0], [3.0], [0.0], [0.0], [4.0], [1.0], [4.0], [0.0], [0.0], [1.0], [4.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [3.0], [0.0], [3.0], [1.0], [3.0], [4.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [3.0], [1.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [4.0], [0.0], [0.0], [3.0], [4.0], [3.0], [1.0], [3.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [4.0], [4.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [3.0], [0.0], [0.0], [3.0], [4.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [4.0], [4.0], [0.0], [1.0], [0.0], [3.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [1.0], [4.0], [1.0], [0.0], [1.0], [1.0], [0.0], [4.0], [3.0], [0.0], [0.0], [4.0], [1.0], [0.0], [3.0], [0.0], [4.0], [1.0], [4.0], [3.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [4.0], [3.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [4.0], [1.0], [3.0], [0.0], [1.0], [1.0], [4.0], [4.0], [3.0], [4.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [4.0], [0.0], [1.0], [0.0], [4.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [4.0], [3.0], [3.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [3.0], [4.0], [3.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [4.0], [4.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [4.0], [3.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [4.0], [4.0], [3.0], [3.0], [0.0], [0.0], [1.0], [3.0], [3.0], [3.0], [1.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [1.0], [0.0], [4.0], [1.0], [0.0], [3.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [1.0], [3.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [3.0], [4.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [1.0], [4.0], [4.0], [1.0], [1.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [4.0], [1.0], [0.0], [4.0], [4.0], [1.0], [1.0], [4.0], [4.0], [3.0], [4.0], [1.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [4.0], [3.0], [1.0], [0.0], [3.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [4.0], [1.0], [1.0], [0.0], [1.0], [1.0], [3.0], [1.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [3.0], [1.0], [1.0], [1.0], [0.0], [0.0], [3.0], [0.0], [3.0], [1.0], [1.0], [1.0], [4.0], [3.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [1.0], [4.0], [0.0], [1.0], [4.0], [0.0], [1.0], [1.0], [3.0], [4.0], [4.0], [0.0], [4.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [3.0], [0.0], [3.0], [1.0], [0.0], [3.0], [3.0], [1.0], [4.0], [4.0], [4.0], [0.0], [4.0], [1.0], [1.0], [4.0], [1.0], [4.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [3.0], [3.0], [0.0], [0.0], [0.0], [4.0], [3.0], [1.0], [3.0], [1.0], [4.0], [0.0], [1.0], [0.0], [1.0], [3.0], [0.0], [1.0], [1.0], [3.0], [1.0], [0.0], [1.0], [1.0], [1.0], [4.0], [0.0], [3.0], [1.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [1.0], [4.0], [0.0], [0.0], [1.0], [4.0], [4.0], [4.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [1.0], [1.0], [3.0], [3.0], [1.0], [4.0], [1.0], [1.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [4.0], [4.0], [1.0], [4.0], [4.0], [0.0], [4.0], [1.0], [0.0], [1.0], [3.0], [1.0], [3.0], [4.0], [1.0], [1.0], [0.0], [3.0], [0.0], [0.0], [3.0], [3.0], [4.0], [1.0], [4.0], [0.0], [3.0], [1.0], [0.0], [1.0], [0.0], [4.0], [3.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [4.0], [0.0], [1.0], [4.0], [3.0], [1.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [3.0], [0.0], [1.0], [1.0], [1.0], [0.0], [3.0], [3.0], [0.0], [3.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [3.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [3.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [3.0], [1.0], [4.0], [1.0], [0.0], [0.0], [3.0], [3.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [3.0], [0.0], [3.0], [4.0], [1.0], [4.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [3.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [4.0], [0.0], [1.0], [0.0], [4.0], [3.0], [1.0], [3.0], [3.0], [0.0], [4.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [4.0], [1.0], [4.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [3.0], [1.0], [3.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [3.0], [0.0], [1.0], [4.0], [1.0], [3.0], [3.0], [0.0], [4.0], [1.0], [0.0], [3.0], [1.0], [3.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [4.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [4.0], [3.0], [0.0], [0.0], [1.0], [0.0], [3.0], [1.0], [3.0], [1.0], [3.0], [4.0], [0.0], [3.0], [0.0], [4.0], [4.0], [0.0], [0.0], [0.0], [4.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [4.0], [4.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [3.0], [1.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [3.0], [4.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [4.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [4.0], [1.0], [4.0], [3.0], [1.0], [1.0], [0.0], [1.0], [0.0], [4.0], [4.0], [4.0], [0.0], [1.0], [3.0], [4.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [4.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [1.0], [4.0], [1.0], [4.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [3.0], [0.0], [4.0], [3.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [3.0], [0.0], [1.0], [4.0], [1.0], [0.0], [4.0], [3.0], [0.0], [0.0], [0.0], [0.0], [3.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [3.0], [1.0], [1.0], [4.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [3.0], [3.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [4.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [4.0], [4.0], [1.0], [1.0], [1.0], [0.0], [0.0], [4.0], [1.0], [3.0], [3.0], [1.0], [0.0], [4.0], [1.0], [3.0], [1.0], [0.0], [4.0], [1.0], [3.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [4.0], [1.0], [1.0], [1.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [3.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [3.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [3.0], [0.0], [3.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [3.0], [4.0], [1.0], [1.0], [3.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [4.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [1.0], [3.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [3.0], [1.0], [1.0], [1.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [3.0], [0.0], [1.0], [4.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [3.0], [1.0], [4.0], [0.0], [0.0], [0.0], [4.0], [3.0], [4.0], [3.0], [1.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [4.0], [0.0], [4.0], [1.0], [3.0], [1.0], [4.0], [0.0], [0.0], [3.0], [1.0], [1.0], [0.0], [0.0], [4.0], [3.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [1.0], [1.0], [4.0], [3.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [4.0], [0.0], [4.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [3.0], [0.0], [4.0], [0.0], [3.0], [0.0], [0.0], [4.0], [4.0], [1.0], [1.0], [0.0], [3.0], [0.0], [0.0], [1.0], [1.0], [1.0], [4.0], [1.0], [1.0], [3.0], [1.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [4.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [1.0], [0.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [3.0], [3.0], [3.0], [0.0], [4.0], [0.0], [4.0], [1.0], [3.0], [1.0], [1.0], [4.0], [3.0], [1.0], [1.0], [1.0], [1.0], [0.0], [3.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [3.0], [1.0], [1.0], [4.0], [1.0], [1.0], [4.0], [1.0], [4.0], [1.0], [1.0], [0.0], [1.0], [3.0], [3.0], [1.0], [1.0], [4.0], [3.0], [1.0], [0.0], [4.0], [3.0], [4.0], [0.0], [1.0], [0.0], [3.0], [1.0], [0.0], [4.0], [0.0], [4.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [3.0], [0.0], [3.0], [0.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [3.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [4.0], [4.0], [3.0], [3.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [3.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [3.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [1.0], [4.0], [0.0], [4.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [1.0], [0.0], [1.0], [4.0], [3.0], [0.0], [3.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [3.0], [0.0], [1.0], [3.0], [0.0], [4.0], [1.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [3.0], [0.0], [0.0], [3.0], [1.0], [4.0], [0.0], [0.0], [0.0], [3.0], [1.0], [1.0], [0.0], [1.0], [4.0], [1.0], [0.0], [1.0], [1.0], [1.0], [4.0], [1.0], [0.0], [3.0], [1.0], [4.0], [1.0], [0.0], [1.0], [0.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [3.0], [1.0], [3.0], [0.0], [3.0], [0.0], [1.0], [4.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [0.0], [4.0], [3.0], [0.0], [0.0], [1.0], [1.0], [4.0], [4.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [4.0], [1.0], [1.0], [3.0], [1.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [3.0], [4.0], [1.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [3.0], [1.0], [3.0], [1.0], [4.0], [0.0], [4.0], [0.0], [1.0], [0.0], [0.0], [4.0], [3.0], [1.0], [0.0], [4.0], [4.0], [0.0], [0.0], [3.0], [4.0], [4.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [3.0], [1.0], [0.0], [0.0], [4.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [3.0], [0.0], [0.0], [0.0], [4.0], [1.0], [4.0], [1.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [3.0], [1.0], [0.0], [3.0], [0.0], [4.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [3.0], [4.0], [1.0], [3.0], [4.0], [1.0], [0.0], [3.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [3.0], [4.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [4.0], [0.0], [1.0], [1.0], [1.0], [4.0], [0.0], [4.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [1.0], [1.0], [3.0], [3.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [4.0], [0.0], [3.0], [1.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [4.0], [0.0], [3.0], [3.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [3.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [4.0], [1.0], [1.0], [0.0], [4.0], [3.0], [1.0], [3.0], [1.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [3.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [4.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [4.0], [3.0], [3.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [3.0], [4.0], [3.0], [0.0], [3.0], [1.0], [4.0], [1.0], [1.0], [0.0], [4.0], [1.0], [1.0], [0.0], [1.0], [4.0], [4.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [1.0], [4.0], [1.0], [1.0], [3.0], [3.0], [4.0], [3.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [0.0], [4.0], [0.0], [3.0], [0.0], [0.0], [1.0], [4.0], [4.0], [0.0], [3.0], [1.0], [3.0], [4.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [1.0], [1.0], [4.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [1.0], [3.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [1.0], [4.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [3.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [1.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [3.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [1.0], [1.0], [1.0], [1.0], [4.0], [0.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [4.0], [0.0], [1.0], [1.0], [1.0], [4.0], [3.0], [0.0], [1.0], [0.0], [4.0], [3.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [4.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [4.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [1.0], [4.0], [3.0], [4.0], [1.0], [0.0], [4.0], [3.0], [1.0], [0.0], [0.0], [3.0], [4.0], [0.0], [3.0], [3.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [3.0], [1.0], [1.0], [4.0], [3.0], [0.0], [1.0], [4.0], [1.0], [1.0], [4.0], [3.0], [0.0], [4.0], [3.0], [3.0], [0.0], [4.0], [0.0], [1.0], [0.0], [4.0], [0.0], [4.0], [0.0], [0.0], [4.0], [0.0], [4.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [3.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [4.0], [3.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [3.0], [0.0], [3.0], [1.0], [0.0], [4.0], [4.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [4.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [3.0], [3.0], [4.0], [1.0], [3.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [4.0], [0.0], [4.0], [4.0], [1.0], [4.0], [1.0], [4.0], [1.0], [3.0], [1.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [3.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [3.0], [1.0], [3.0], [3.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [4.0], [4.0], [3.0], [4.0], [0.0], [4.0], [3.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [3.0], [4.0], [4.0], [3.0], [3.0], [0.0], [0.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [4.0], [1.0], [1.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [1.0], [0.0], [4.0], [1.0], [3.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [4.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [0.0], [1.0], [3.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [3.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [4.0], [1.0], [1.0], [1.0], [1.0], [1.0], [3.0], [0.0], [1.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [1.0], [1.0], [0.0], [1.0], [1.0], [3.0], [0.0], [4.0], [1.0], [0.0], [3.0], [1.0], [1.0], [1.0], [0.0], [3.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [3.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [3.0], [1.0], [0.0], [4.0], [0.0], [4.0], [3.0], [3.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [3.0], [1.0], [3.0], [1.0], [1.0], [4.0], [0.0], [3.0], [1.0], [0.0], [0.0], [4.0], [4.0], [0.0], [1.0], [1.0], [3.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [3.0], [1.0], [3.0], [4.0], [3.0], [0.0], [1.0], [0.0], [3.0], [1.0], [1.0], [1.0], [3.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [3.0], [3.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [4.0], [4.0], [0.0], [3.0], [4.0], [1.0], [3.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [3.0], [0.0], [0.0], [3.0], [1.0], [1.0], [4.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [4.0], [1.0], [4.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [3.0], [4.0], [3.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [3.0], [1.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [4.0], [1.0], [4.0], [1.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [1.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [4.0], [1.0], [3.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [1.0], [4.0], [1.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [4.0], [3.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [3.0], [0.0], [4.0], [4.0], [4.0], [3.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [4.0], [0.0], [0.0], [3.0], [1.0], [0.0], [1.0], [3.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [3.0], [3.0], [0.0], [1.0], [0.0], [3.0], [1.0], [0.0], [0.0], [4.0], [4.0], [0.0], [0.0], [4.0], [3.0], [0.0], [0.0], [0.0], [4.0], [3.0], [0.0], [4.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [1.0], [1.0], [4.0], [4.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [4.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [4.0], [3.0], [1.0], [0.0], [0.0], [4.0], [4.0], [0.0], [1.0], [4.0], [0.0], [1.0], [3.0], [3.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [4.0], [4.0], [4.0], [1.0], [3.0], [4.0], [4.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [1.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [4.0], [0.0], [4.0], [0.0], [0.0], [1.0], [4.0], [1.0], [4.0], [4.0], [1.0], [1.0], [0.0], [1.0], [1.0], [4.0], [1.0], [0.0], [3.0], [4.0], [1.0], [0.0], [0.0], [4.0], [0.0], [1.0], [3.0], [3.0], [0.0], [3.0], [0.0], [1.0], [3.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [1.0], [0.0], [0.0], [3.0], [1.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [4.0], [1.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [4.0], [3.0], [1.0], [1.0], [0.0], [3.0], [0.0], [3.0], [1.0], [1.0], [0.0], [3.0], [1.0], [0.0], [3.0], [4.0], [3.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [4.0], [3.0], [1.0], [0.0], [1.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [3.0], [4.0], [0.0], [3.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [3.0], [3.0], [1.0], [1.0], [4.0], [0.0], [4.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [4.0], [3.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [3.0], [0.0], [1.0], [0.0], [4.0], [4.0], [4.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [1.0], [3.0], [3.0], [4.0], [0.0], [4.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [4.0], [3.0], [0.0], [4.0], [1.0], [1.0], [4.0], [1.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [4.0], [4.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [3.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [3.0], [0.0], [3.0], [1.0], [1.0], [3.0], [1.0], [1.0], [0.0], [4.0], [4.0], [3.0], [4.0], [0.0], [0.0], [0.0], [3.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [3.0], [3.0], [3.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [3.0], [1.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [1.0], [4.0], [3.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [4.0], [4.0], [4.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [4.0], [1.0], [0.0], [0.0], [4.0], [4.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [4.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [1.0], [3.0], [1.0], [0.0], [4.0], [3.0], [3.0], [4.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [4.0], [3.0], [3.0], [0.0], [3.0], [1.0], [0.0], [1.0], [3.0], [0.0], [4.0], [0.0], [4.0], [0.0], [3.0], [1.0], [3.0], [4.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [4.0], [0.0], [3.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [4.0], [3.0], [4.0], [0.0], [3.0], [1.0], [4.0], [1.0], [0.0], [3.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [1.0], [3.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [3.0], [3.0], [3.0], [0.0], [4.0], [0.0], [4.0], [1.0], [3.0], [1.0], [3.0], [1.0], [1.0], [0.0], [3.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [1.0], [0.0], [3.0], [4.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [3.0], [0.0], [4.0], [1.0], [4.0], [3.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [0.0], [4.0], [3.0], [4.0], [1.0], [3.0], [3.0], [0.0], [1.0], [3.0], [1.0], [4.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [3.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [3.0], [4.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [4.0], [4.0], [1.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [4.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [3.0], [0.0], [3.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [4.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [3.0], [1.0], [0.0], [0.0], [3.0], [3.0], [1.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [4.0], [0.0], [0.0], [3.0], [3.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [4.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [1.0], [4.0], [1.0], [4.0], [0.0], [1.0], [0.0], [1.0], [3.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [3.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [4.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [3.0], [0.0], [0.0], [3.0], [0.0], [0.0], [4.0], [1.0], [1.0], [0.0], [4.0], [4.0], [1.0], [0.0], [3.0], [1.0], [0.0], [4.0], [0.0], [1.0], [0.0], [4.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [1.0], [0.0], [3.0], [0.0], [0.0], [1.0], [4.0], [0.0], [3.0], [0.0], [0.0], [4.0], [0.0], [4.0], [1.0], [1.0], [0.0], [0.0], [4.0], [4.0], [1.0], [1.0], [1.0], [3.0], [1.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [3.0], [1.0], [0.0], [3.0], [0.0], [1.0], [0.0], [3.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [0.0], [3.0], [1.0], [1.0], [3.0], [1.0], [3.0], [1.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [3.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [3.0], [4.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [3.0], [4.0], [3.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [4.0], [1.0], [4.0], [0.0], [1.0], [4.0], [1.0], [0.0], [3.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [3.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [3.0], [4.0], [0.0], [0.0], [4.0], [3.0], [1.0], [4.0], [1.0], [1.0], [0.0], [1.0], [4.0], [1.0], [0.0], [1.0], [3.0], [0.0], [4.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [3.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [4.0], [4.0], [0.0], [4.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [3.0], [1.0], [0.0], [1.0], [1.0], [4.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [4.0], [4.0], [3.0], [0.0], [1.0], [1.0], [1.0], [4.0], [3.0], [0.0], [3.0], [3.0], [4.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [3.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [3.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [4.0], [3.0], [4.0], [0.0], [0.0], [1.0], [0.0], [3.0], [3.0], [3.0], [0.0], [1.0], [1.0], [4.0], [3.0], [1.0], [1.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [4.0], [0.0], [4.0], [0.0], [3.0], [3.0], [1.0], [4.0], [4.0], [3.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [4.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [4.0], [4.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [1.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [3.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [4.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [3.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [3.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [4.0], [0.0], [0.0], [4.0], [1.0], [0.0], [4.0], [0.0], [1.0], [3.0], [0.0], [4.0], [0.0], [1.0], [1.0], [0.0], [1.0], [4.0], [1.0], [3.0], [3.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [0.0], [1.0], [1.0], [4.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [1.0], [1.0], [3.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [3.0], [1.0], [3.0], [1.0], [4.0], [4.0], [4.0], [1.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [4.0], [4.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [1.0], [3.0], [3.0], [0.0], [3.0], [0.0], [3.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [3.0], [4.0], [0.0], [1.0], [1.0], [3.0], [4.0], [0.0], [4.0], [0.0], [3.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [1.0], [1.0], [0.0], [0.0], [4.0], [4.0], [1.0], [3.0], [1.0], [1.0], [4.0], [3.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [3.0], [4.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [3.0], [3.0], [1.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [1.0], [1.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [3.0], [3.0], [4.0], [0.0], [1.0], [4.0], [3.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [4.0], [1.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [3.0], [0.0], [3.0], [3.0], [0.0], [1.0], [1.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [4.0], [1.0], [0.0], [0.0], [0.0], [4.0], [4.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [4.0], [4.0], [1.0], [3.0], [0.0], [4.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [4.0], [0.0], [3.0], [4.0], [0.0], [0.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [1.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [3.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [4.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [4.0], [0.0], [1.0], [1.0], [0.0], [4.0], [1.0], [4.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [4.0], [1.0], [0.0], [1.0], [4.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [1.0], [3.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [3.0], [3.0], [1.0], [0.0], [0.0], [1.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [4.0], [1.0], [1.0], [1.0], [1.0], [3.0], [1.0], [4.0], [1.0], [3.0], [1.0], [0.0], [1.0], [1.0], [1.0], [3.0], [4.0], [4.0], [0.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [1.0], [0.0], [4.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [1.0], [4.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [1.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [1.0], [4.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [4.0], [0.0], [4.0], [1.0], [0.0], [3.0], [1.0], [3.0], [4.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [3.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [1.0], [3.0], [4.0], [4.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [4.0], [0.0], [3.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [3.0], [1.0], [4.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [4.0], [0.0], [3.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [4.0], [3.0], [1.0], [1.0], [4.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [4.0], [0.0], [3.0], [0.0], [1.0], [4.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [4.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [4.0], [0.0], [0.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [4.0], [3.0], [1.0], [3.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [4.0], [1.0], [4.0], [3.0], [3.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [4.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [4.0], [1.0], [0.0], [3.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [3.0], [1.0], [1.0], [3.0], [0.0], [1.0], [3.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [3.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [4.0], [0.0], [4.0], [3.0], [0.0], [0.0], [4.0], [1.0], [4.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [3.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [3.0], [0.0], [1.0], [0.0], [3.0], [1.0], [4.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [3.0], [4.0], [0.0], [1.0], [3.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [3.0], [0.0], [3.0], [0.0], [3.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [4.0], [1.0], [0.0], [0.0], [3.0], [4.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [3.0], [0.0], [0.0], [1.0], [4.0], [3.0], [0.0], [1.0], [1.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [4.0], [1.0], [4.0], [0.0], [0.0], [3.0], [0.0], [1.0], [4.0], [1.0], [1.0], [1.0], [1.0], [1.0], [4.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [4.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [3.0], [1.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [3.0], [0.0], [3.0], [3.0], [0.0], [4.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [3.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [3.0], [3.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [3.0], [0.0], [4.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [4.0], [0.0], [1.0], [3.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [4.0], [3.0], [0.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [4.0], [3.0], [0.0], [3.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [3.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [4.0], [4.0], [1.0], [1.0], [0.0], [0.0], [1.0], [3.0], [0.0], [1.0], [2.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [3.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [4.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [4.0], [4.0], [1.0], [0.0], [1.0], [0.0], [3.0], [4.0], [1.0], [4.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [3.0], [0.0], [0.0], [4.0], [1.0], [4.0], [0.0], [3.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [3.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [4.0], [0.0], [1.0], [0.0], [1.0], [0.0], [3.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [4.0], [0.0], [0.0], [0.0], [1.0], [1.0], [4.0], [1.0], [0.0], [4.0], [0.0], [3.0], [0.0], [3.0], [1.0], [0.0], [0.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [4.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [4.0], [0.0], [0.0], [1.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [1.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [3.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [3.0], [3.0], [0.0], [1.0], [0.0], [0.0], [0.0], [3.0], [1.0], [3.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [4.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [4.0], [3.0], [0.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [3.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [3.0], [3.0], [1.0], [3.0], [1.0], [0.0], [0.0], [4.0], [3.0], [1.0], [0.0], [4.0], [4.0], [1.0], [4.0], [3.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [3.0], [4.0], [1.0], [0.0], [1.0], [0.0], [3.0], [1.0], [1.0], [1.0], [1.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [3.0], [1.0], [0.0], [1.0], [4.0], [1.0], [4.0], [4.0], [3.0], [0.0], [4.0], [4.0], [0.0], [4.0], [1.0], [0.0], [1.0], [1.0], [4.0], [3.0], [1.0], [0.0], [1.0], [1.0], [1.0], [3.0], [4.0], [1.0], [3.0], [1.0], [1.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [4.0], [4.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [3.0], [4.0], [4.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [4.0], [4.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [3.0], [0.0], [4.0], [3.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [1.0], [0.0], [1.0], [4.0], [1.0], [4.0], [0.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [3.0], [0.0], [0.0], [1.0], [0.0], [4.0], [0.0], [1.0], [1.0], [1.0], [0.0], [4.0], [1.0], [1.0], [3.0], [1.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [3.0], [4.0], [0.0], [4.0], [1.0], [1.0], [1.0], [4.0], [3.0], [0.0], [1.0], [0.0], [1.0], [0.0], [4.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [3.0], [0.0], [1.0], [4.0], [1.0], [0.0], [3.0], [0.0], [3.0], [3.0], [0.0], [1.0], [3.0], [0.0], [3.0], [0.0], [1.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [4.0], [3.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [4.0], [1.0], [3.0], [4.0], [0.0], [4.0], [3.0], [0.0], [4.0], [4.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [3.0], [0.0], [3.0], [1.0], [3.0], [1.0], [4.0], [4.0], [0.0], [1.0], [4.0], [1.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [3.0], [1.0], [1.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [1.0], [4.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [0.0], [4.0], [0.0], [4.0], [3.0], [0.0], [4.0], [1.0], [0.0], [1.0], [4.0], [4.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [1.0], [3.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [4.0], [4.0], [0.0], [3.0], [1.0], [0.0], [1.0], [3.0], [0.0], [4.0], [4.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [0.0], [4.0], [1.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [1.0], [3.0], [3.0], [0.0], [0.0], [4.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [4.0], [0.0], [0.0], [0.0], [4.0], [0.0], [4.0], [4.0], [1.0], [0.0], [0.0], [3.0], [0.0], [1.0], [0.0], [0.0], [1.0], [0.0], [4.0], [3.0], [1.0], [1.0], [1.0], [3.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [3.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [1.0], [4.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [4.0], [4.0], [0.0], [1.0], [0.0], [4.0], [4.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [3.0], [1.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [3.0], [1.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [3.0], [0.0], [4.0], [3.0], [1.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [3.0], [4.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [4.0], [0.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [4.0], [3.0], [0.0], [1.0], [3.0], [1.0], [0.0], [4.0], [1.0], [0.0], [0.0], [4.0], [0.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [0.0], [1.0], [3.0], [3.0], [4.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [3.0], [0.0], [0.0], [4.0], [1.0], [1.0], [4.0], [0.0], [0.0], [0.0], [0.0], [3.0], [0.0], [0.0], [1.0], [1.0], [1.0], [0.0], [1.0], [4.0], [0.0], [4.0], [1.0], [4.0], [1.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [1.0], [0.0], [3.0], [0.0], [0.0], [4.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [1.0], [4.0], [3.0], [4.0], [4.0], [4.0], [1.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.0], [4.0], [4.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [1.0], [4.0], [1.0], [0.0], [0.0], [1.0], [1.0], [4.0], [3.0], [0.0], [3.0], [1.0], [1.0], [0.0], [1.0], [3.0], [1.0], [0.0], [0.0], [0.0], [4.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0], [1.0], [0.0], [3.0]] . ordinal_encoder.categories_ . [array([&#39;&lt;1H OCEAN&#39;, &#39;INLAND&#39;, &#39;ISLAND&#39;, &#39;NEAR BAY&#39;, &#39;NEAR OCEAN&#39;], dtype=object)] . This encoding may not be apt for this ocean proximity data. . We see the class assigned values like 0,1,2,3,4 for the 5 different values i.e. OCEAN&#39;, &#39;INLAND&#39;, &#39;ISLAND&#39;, &#39;NEAR BAY&#39;, &#39;NEAR OCEAN . But we know that 4 is not greater than 3,2 or 1. . In fact, 4 is almost same as 1 i.e. Near Ocean is similar to Ocean. . This encoding may not result in a good prediction. . In such cases, we use One Hot Encoding.. . This just creates a sequence of 0s ans 1s for each Categorical value as shown below. Below is just an example to get an idea. . &#39;OCEAN&#39; - 00000 . &#39;INLAND&#39; - 01000 . &#39;ISLAND&#39; - 00100 . &#39;NEAR BAY&#39; - 00010 . &#39;NEAR OCEAN&#39; - 00001 . from sklearn.preprocessing import OneHotEncoder cat_encoder = OneHotEncoder() housing_cat_1hot = cat_encoder.fit_transform(housing_cat) . housing_cat_1hot . &lt;16512x5 sparse matrix of type &#39;&lt;class &#39;numpy.float64&#39;&gt;&#39; with 16512 stored elements in Compressed Sparse Row format&gt; . housing_cat_1hot.toarray() . array([[1., 0., 0., 0., 0.], [1., 0., 0., 0., 0.], [0., 0., 0., 0., 1.], ..., [0., 1., 0., 0., 0.], [1., 0., 0., 0., 0.], [0., 0., 0., 1., 0.]]) . cat_encoder.categories_ . [array([&#39;&lt;1H OCEAN&#39;, &#39;INLAND&#39;, &#39;ISLAND&#39;, &#39;NEAR BAY&#39;, &#39;NEAR OCEAN&#39;], dtype=object)] . Custom Transformers . Although Scikit-Learn provides many useful transformers, you will need to write your own for tasks such as custom cleanup operations or combining specific attributes. You will want your transformer to work seamlessly with Scikit-Learn functionalities (such as pipelines), and since Scikit-Learn relies on duck typing (not inheritance), all you need to do is create a class and implement three methods: fit() (returning self), transform(), and fit_transform(). . You can get the last one for free by simply adding TransformerMixin as a base class. If you add BaseEstimator as a base class (and avoid *args and **kargs in your constructor), you will also get two extra methods (get_params() and set_params()) that will be useful for automatic hyperparameter tuning. . For example, here is a small transformer class that adds the combined attributes we discussed earlier: . np.c_ is nothing but column stacking. Similarly we can also do np.r_for row stacking.. . from sklearn.base import BaseEstimator, TransformerMixin rooms_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6 class CombinedAttributesAdder(BaseEstimator, TransformerMixin): def __init__(self, add_bedrooms_per_room=True): # no *args or **kargs self.add_bedrooms_per_room = add_bedrooms_per_room def fit(self, X, y=None): return self # nothing else to do def transform(self, X): rooms_per_household = X[:, rooms_ix] / X[:, households_ix] population_per_household = X[:, population_ix] / X[:, households_ix] if self.add_bedrooms_per_room: bedrooms_per_room = X[:, bedrooms_ix] / X[:, rooms_ix] return np.c_[X, rooms_per_household, population_per_household, bedrooms_per_room] else: return np.c_[X, rooms_per_household, population_per_household] attr_adder = CombinedAttributesAdder(add_bedrooms_per_room=False) housing_extra_attribs = attr_adder.transform(housing.values) . In this example the transformer has one hyperparameter, add_bedrooms_per_room, set to True by default (it is often helpful to provide sensible defaults). This hyperparameter will allow you to easily find out whether adding this attribute helps the Machine Learning algorithms or not. More generally, you can add a hyperparameter to gate any data preparation step that you are not 100% sure about. The more you automate these data preparation steps, the more combinations you can automatically try out, making it much more likely that you will find a great combination (and saving you a lot of time). . Feature Scaling . Feature Scaling is nothing but making the numerical columns be in similar scale. . If there are numbers for one feature ranging from 0 to 1000 and for other feature ranging from -0.01 to .001 then the ML algorithms do not work well. . That is when feature scaling comes into picture to make the different numbers adhere to similar scale. . Two main approaches - . Min Max Scaling or Normalization . A min and max value could be given and all numbers will be changed to fit within that range. . | Generally the default range is 0 to 1 . | Causes issues when data has outliers | MinMaxScaler Class | . Standardization . Subtract the mean and Divide by Std Dev. | Less Affected by outliers | StandardScaler Class | . NOTE - Any transformation should be used to fit tothe training data only, not to the full dataset (including the test set). . Then they will be used to transform the training set and the test set (and any new data). . Pipelines . Like we saw in previous sections, there are many transformations that we did. . They are done one after the other and the outputs of one transformation generally goes as input to next transformation. . This can be lined up using a sklearn Pipeline class . We have used SimpleImputer to handle NULLs . We have created a Column Adder class to add new columns . We have to do Feature Scaling after the above two . from sklearn.pipeline import Pipeline from sklearn.preprocessing import StandardScaler num_pipeline = Pipeline([ (&#39;imputer&#39;, SimpleImputer(strategy=&quot;median&quot;)), (&#39;attribs_adder&#39;, CombinedAttributesAdder()), (&#39;std_scaler&#39;, StandardScaler()), ]) . housing_num_tr = num_pipeline.fit_transform(housing_num) . type(housing_num_tr) . numpy.ndarray . The Pipeline constructor takes a list of name/estimator pairs defining a sequence of steps. All but the last estimator must be transformers (i.e., they must have a fit_transform() method). The names can be anything you like (as long as they are unique and don’t contain double underscores, __); they will come in handy later for hyperparameter tuning. . When you call the pipeline’s fit() method, it calls fit_transform() sequentially on all transformers, passing the output of each call as the parameter to the next call until it reaches the final estimator, for which it calls the fit() method. . The pipeline exposes the same methods as the final estimator. In this example, the last estimator is a StandardScaler, which is a transformer, so the pipeline has a transform() method that applies all the transforms to the data in sequence (and of course also a fit_transform() method, which is the one we used). . Column Transformer . So far, we have handled the categorical columns and the numerical columns separately. It would be more convenient to have a single transformer able to handle all columns, applying the appropriate transformations to each column. . In version 0.20, Scikit-Learn introduced the ColumnTransformer for this purpose. Without this sklearn-pandas or some other third party library has to be used for achieving this. . from sklearn.compose import ColumnTransformer num_attribs = list(housing_num) cat_attribs = list(housing_cat) . num_attribs . [&#39;longitude&#39;, &#39;latitude&#39;, &#39;housing_median_age&#39;, &#39;total_rooms&#39;, &#39;total_bedrooms&#39;, &#39;population&#39;, &#39;households&#39;, &#39;median_income&#39;] . cat_attribs . [&#39;ocean_proximity&#39;] . full_pipeline = ColumnTransformer([ (&quot;num&quot;, num_pipeline, num_attribs), (&quot;cat&quot;, OneHotEncoder(), cat_attribs), ], remainder=&#39;passthrough&#39;) . We pass the numerical pipeline (of 3 transformers) that we created earlier for Numerical Attributes and the single transformer for Categorical Attributes . Also note the remainder keyword. . If there are any columns that are not taken care of via the numerical pipeline or categorical pipeline, they will be dropped by default. . The &#39;passthrough&#39; keyword tells the column transformer to pass the remainder columns as is. . In this case, there are none. . We can now pass the training dataset to this full pipeline. . housing_train.head() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income ocean_proximity . 17606 -121.89 | 37.29 | 38.0 | 1568.0 | 351.0 | 710.0 | 339.0 | 2.7042 | &lt;1H OCEAN | . 18632 -121.93 | 37.05 | 14.0 | 679.0 | 108.0 | 306.0 | 113.0 | 6.4214 | &lt;1H OCEAN | . 14650 -117.20 | 32.77 | 31.0 | 1952.0 | 471.0 | 936.0 | 462.0 | 2.8621 | NEAR OCEAN | . 3230 -119.61 | 36.31 | 25.0 | 1847.0 | 371.0 | 1460.0 | 353.0 | 1.8839 | INLAND | . 3555 -118.59 | 34.23 | 17.0 | 6592.0 | 1525.0 | 4459.0 | 1463.0 | 3.0347 | &lt;1H OCEAN | . housing_train.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 16512 entries, 17606 to 15775 Data columns (total 9 columns): # Column Non-Null Count Dtype -- -- 0 longitude 16512 non-null float64 1 latitude 16512 non-null float64 2 housing_median_age 16512 non-null float64 3 total_rooms 16512 non-null float64 4 total_bedrooms 16354 non-null float64 5 population 16512 non-null float64 6 households 16512 non-null float64 7 median_income 16512 non-null float64 8 ocean_proximity 16512 non-null object dtypes: float64(8), object(1) memory usage: 1.3+ MB . Note that the housing train dataframe above is plain data without any transformations or data cleanup (see nulls in total_bedrooms) whatsoever . All that will be taken care of by the single line below since we built the pipeline to handle data cleanup, column additions, feature scaling, encoding categoricals . housing_prepared = full_pipeline.fit_transform(housing_train) . type(housing_prepared) . numpy.ndarray . housing_prepared . array([[-1.15604281, 0.77194962, 0.74333089, ..., 0. , 0. , 0. ], [-1.17602483, 0.6596948 , -1.1653172 , ..., 0. , 0. , 0. ], [ 1.18684903, -1.34218285, 0.18664186, ..., 0. , 0. , 1. ], ..., [ 1.58648943, -0.72478134, -1.56295222, ..., 0. , 0. , 0. ], [ 0.78221312, -0.85106801, 0.18664186, ..., 0. , 0. , 0. ], [-1.43579109, 0.99645926, 1.85670895, ..., 0. , 1. , 0. ]]) . Train the ML model using the data . Data exploration is done. . Data split for train/test is done . Data vizualations were done to help with the above two. . All the required data transformations are complete. . The data is now ready to be passed to ML algorithms . Evaluate atleast 2-3 Models . Linear Regression ML Model . housing_prepared . array([[-1.15604281, 0.77194962, 0.74333089, ..., 0. , 0. , 0. ], [-1.17602483, 0.6596948 , -1.1653172 , ..., 0. , 0. , 0. ], [ 1.18684903, -1.34218285, 0.18664186, ..., 0. , 0. , 1. ], ..., [ 1.58648943, -0.72478134, -1.56295222, ..., 0. , 0. , 0. ], [ 0.78221312, -0.85106801, 0.18664186, ..., 0. , 0. , 0. ], [-1.43579109, 0.99645926, 1.85670895, ..., 0. , 1. , 0. ]]) . from sklearn.linear_model import LinearRegression lin_reg = LinearRegression() lin_reg.fit(housing_prepared, housing_labels) . LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False) . Lets pick some training data and get the predictions . some_data = housing_train.iloc[:5] . some_data . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income ocean_proximity . 17606 -121.89 | 37.29 | 38.0 | 1568.0 | 351.0 | 710.0 | 339.0 | 2.7042 | &lt;1H OCEAN | . 18632 -121.93 | 37.05 | 14.0 | 679.0 | 108.0 | 306.0 | 113.0 | 6.4214 | &lt;1H OCEAN | . 14650 -117.20 | 32.77 | 31.0 | 1952.0 | 471.0 | 936.0 | 462.0 | 2.8621 | NEAR OCEAN | . 3230 -119.61 | 36.31 | 25.0 | 1847.0 | 371.0 | 1460.0 | 353.0 | 1.8839 | INLAND | . 3555 -118.59 | 34.23 | 17.0 | 6592.0 | 1525.0 | 4459.0 | 1463.0 | 3.0347 | &lt;1H OCEAN | . some_data_prepared = full_pipeline.transform(some_data) . some_data_prepared . array([[-1.15604281, 0.77194962, 0.74333089, -0.49323393, -0.44543821, -0.63621141, -0.42069842, -0.61493744, -0.31205452, -0.08649871, 0.15531753, 1. , 0. , 0. , 0. , 0. ], [-1.17602483, 0.6596948 , -1.1653172 , -0.90896655, -1.0369278 , -0.99833135, -1.02222705, 1.33645936, 0.21768338, -0.03353391, -0.83628902, 1. , 0. , 0. , 0. , 0. ], [ 1.18684903, -1.34218285, 0.18664186, -0.31365989, -0.15334458, -0.43363936, -0.0933178 , -0.5320456 , -0.46531516, -0.09240499, 0.4222004 , 0. , 0. , 0. , 0. , 1. ], [-0.01706767, 0.31357576, -0.29052016, -0.36276217, -0.39675594, 0.03604096, -0.38343559, -1.04556555, -0.07966124, 0.08973561, -0.19645314, 0. , 1. , 0. , 0. , 0. ], [ 0.49247384, -0.65929936, -0.92673619, 1.85619316, 2.41221109, 2.72415407, 2.57097492, -0.44143679, -0.35783383, -0.00419445, 0.2699277 , 1. , 0. , 0. , 0. , 0. ]]) . print(&quot;Predictions:&quot;, lin_reg.predict(some_data_prepared)) . Predictions: [210644.60459286 317768.80697211 210956.43331178 59218.98886849 189747.55849879] . print(&quot;Original Values:&quot;, list(housing_labels.iloc[:5])) . Original Values: [286600.0, 340600.0, 196900.0, 46300.0, 254500.0] . Okay.. Its not bad.. . Lets predict for entire dataset and also calculate the error . housing_predictions = lin_reg.predict(housing_prepared) . from sklearn.metrics import mean_squared_error lin_mse = mean_squared_error(housing_labels, housing_predictions) print(np.sqrt(lin_mse)) # This is nothing but RMSE . 68628.19819848923 . A difference of $68K for a prediction is not a good number. . It could be because the model is very simple.. Its a simple Linear Regression Model. . The model is underfitting the data. The features need to enhanced or a different model needs to be chosen. . Lets try Decision Tree . Decision Tree Model . from sklearn.tree import DecisionTreeRegressor tree_reg = DecisionTreeRegressor() tree_reg.fit(housing_prepared, housing_labels) . DecisionTreeRegressor(ccp_alpha=0.0, criterion=&#39;mse&#39;, max_depth=None, max_features=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, presort=&#39;deprecated&#39;, random_state=None, splitter=&#39;best&#39;) . housing_predictions = tree_reg.predict(housing_prepared) . from sklearn.metrics import mean_squared_error tree_mse = mean_squared_error(housing_labels, housing_predictions) print(np.sqrt(tree_mse)) # This is nothing but RMSE from Decision Tree Regressor . 0.0 . A difference of $0 for a prediction vs original is also not a good number. . It is because the model is overfitting the data. . How do we confirm this? We can evaluate the model on validation set and the error is going to be very high . Another option is Scikit-Learn’s K-fold cross-validation feature . This class (from sklearn.model_selection import cross_val_score) splits the training set into K distinct subsets called folds, then it trains and evaluates the Decision Tree model K times, picking a different fold for evaluation every time and training on the other K-1 folds . from sklearn.model_selection import cross_val_score scores = cross_val_score(tree_reg, housing_prepared, housing_labels, scoring=&quot;neg_mean_squared_error&quot;, cv=10) . We have run the cross validation above with K=10 . The scoring of the cross validation feature of sklearn is actually negative. . Therefore we do a sqrt of -scores below. . tree_rmse_scores = np.sqrt(-scores) . Below is a small function to display scores mean, std dev and list of scores for each cross validation. . def display_scores(scores): print(&quot;Mean Score : &quot;, scores.mean(), &quot; nStd Dev : &quot; ,scores.std(), &quot; nAll Scores : &quot; ,scores) . display_scores(tree_rmse_scores) . Mean Score : 70666.74616904806 Std Dev : 2928.322738055112 All Scores : [69327.01708558 65486.39211857 71358.25563341 69091.37509104 70570.20267046 75529.94622521 69895.20650652 70660.14247357 75843.74719231 68905.17669382] . As expected, the Decision Tree is not accurate in its predictions. . In fact, it seems to be worse than Linear Regression Model. . Lets try Random Forests algorithm next . Random Forest Model . from sklearn.ensemble import RandomForestRegressor forest_reg = RandomForestRegressor() forest_reg.fit(housing_prepared, housing_labels) . RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion=&#39;mse&#39;, max_depth=None, max_features=&#39;auto&#39;, max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=None, oob_score=False, random_state=None, verbose=0, warm_start=False) . housing_predictions = forest_reg.predict(housing_prepared) . forest_rmse = np.sqrt(mean_squared_error(housing_labels, housing_predictions)) . display_scores(forest_rmse) . Mean Score : 18680.294240259147 Std Dev : 0.0 All Scores : 18680.294240259147 . Looks perfect..!!? No underfitting or overfitting ?? . Lets try the cross validation score again . scores = cross_val_score(forest_reg, housing_prepared, housing_labels, scoring=&quot;neg_mean_squared_error&quot;, cv=10) . display_scores(np.sqrt(-scores)) . Mean Score : 50150.018373763225 Std Dev : 1902.0697041387534 All Scores : [49557.6095063 47584.54435547 49605.349788 52325.13724488 49586.9889247 53154.87424699 48800.48987508 47880.32844243 52958.68645964 50046.17489414] . Save the Model . We can save the model with joblib library or pickle library. . Below is an example of joblib library. . import joblib . joblib.dump(forest_reg, &#39;forest_reg_model.pkl&#39;) . [&#39;forest_reg_model.pkl&#39;] . ls . forest_reg_model.pkl housing.csv sample_data/ . forest_reg_reloaded = joblib.load(&#39;forest_reg_model.pkl&#39;) . Finetune the Model . We can either manually finetune by changing the various hyperparameters (parameters passed to ML algorithm) OR use sklearn classes to try out various hyperparameters and see which ones are best . GridSearchCV and RandomizedSearchCV are the classes . Another way to finetune is to use ensemble method (similar to Random Forest) of using multiple algorithms . Below is an example for GridSearch. . Details need to be added later once Random Forest Deep Dive is done. . from sklearn.model_selection import GridSearchCV param_grid = [ {&#39;n_estimators&#39;: [3, 10, 30], &#39;max_features&#39;: [2, 4, 6, 8]}, {&#39;bootstrap&#39;: [False], &#39;n_estimators&#39;: [3, 10], &#39;max_features&#39;: [2, 3, 4]}, ] forest_reg = RandomForestRegressor() grid_search = GridSearchCV(forest_reg, param_grid, cv=5, scoring=&#39;neg_mean_squared_error&#39;, return_train_score=True) grid_search.fit(housing_prepared, housing_labels) . GridSearchCV(cv=5, error_score=nan, estimator=RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion=&#39;mse&#39;, max_depth=None, max_features=&#39;auto&#39;, max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=None, oob_score=False, random_state=None, verbose=0, warm_start=False), iid=&#39;deprecated&#39;, n_jobs=None, param_grid=[{&#39;max_features&#39;: [2, 4, 6, 8], &#39;n_estimators&#39;: [3, 10, 30]}, {&#39;bootstrap&#39;: [False], &#39;max_features&#39;: [2, 3, 4], &#39;n_estimators&#39;: [3, 10]}], pre_dispatch=&#39;2*n_jobs&#39;, refit=True, return_train_score=True, scoring=&#39;neg_mean_squared_error&#39;, verbose=0) . We can get the best values for the hyperparameters as shown below . grid_search.best_params_ . {&#39;max_features&#39;: 6, &#39;n_estimators&#39;: 30} . We can also get the best estimator directly . grid_search.best_estimator_ . RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion=&#39;mse&#39;, max_depth=None, max_features=6, max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=30, n_jobs=None, oob_score=False, random_state=None, verbose=0, warm_start=False) . feature_importances = grid_search.best_estimator_.feature_importances_ . feature_importances . array([7.55720671e-02, 6.39878625e-02, 4.24072059e-02, 1.82928273e-02, 1.68924417e-02, 1.75601900e-02, 1.66881781e-02, 3.03268232e-01, 6.31565549e-02, 1.08958622e-01, 8.44196144e-02, 8.53515062e-03, 1.73063945e-01, 8.08024120e-05, 2.96250425e-03, 4.15380176e-03]) . You can select this model and test it on the test set . final_model = grid_search.best_estimator_ X_test = strat_test_set.drop(&quot;median_house_value&quot;, axis=1) y_test = strat_test_set[&quot;median_house_value&quot;].copy() X_test_prepared = full_pipeline.transform(X_test) final_predictions = final_model.predict(X_test_prepared) final_mse = mean_squared_error(y_test, final_predictions) final_rmse = np.sqrt(final_mse) . /usr/local/lib/python3.6/dist-packages/sklearn/compose/_column_transformer.py:430: FutureWarning: Given feature/column names or counts do not match the ones for the data given during fit. This will fail from v0.24. FutureWarning) . print(final_rmse) . 48760.26530172545 . Model can be deployed on web and predict method can be used to evaluate and get the model&#39;s output for new data. .",
            "url": "https://mrg-ai.github.io/blog/2020/08/08/ML-EndToEnd-Flow-CAHousingDataset.html",
            "relUrl": "/2020/08/08/ML-EndToEnd-Flow-CAHousingDataset.html",
            "date": " • Aug 8, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Ml Intro",
            "content": "This post does not explain what ML is and the usual stuff. Rather it mentions some basic details about ML. This is based on Aurelion’s ML book. . Types of ML . Based on how they are classified, below are some classifications . Whether or not they are trained with human supervision . Supervised . | Unsupervised . | Semi supervised . | Reinforcement Learning . | . | Whether or not they can learn incrementally on the fly . Online . | batch learning . | . | Whether they work by simply comparing new data points to known data points, or instead by detecting patterns in the training data and building a predictive model, much like scientists do . instance-based . | model-based learning . | . | . Common Supervised Learning Algorithms . k-Nearest Neighbors . | Linear Regression . | Logistic Regression . | Support Vector Machines (SVMs) . | Decision Trees and Random Forests . | Neural networks . | . Common Unsupervised Learning Algorithms . Clustering . K-Means . | DBSCAN . | Hierarchical Cluster Analysis (HCA) . | . | Anomaly detection and novelty detection . One-class SVM . | Isolation Forest . | . | Visualization and dimensionality reduction . Principal Component Analysis (PCA) . | Kernel PCA . | Locally Linear Embedding (LLE) . | t-Distributed Stochastic Neighbor Embedding (t-SNE) . | . | Association rule learning . Apriori . | Eclat . | . | . Most semi supervised learning algorithms are combinations of unsupervised and supervised algorithms . For example, deep belief networks (DBNs) are based on unsupervised components called restricted Boltzmann machines (RBMs) stacked on top of one another. RBMs are trained sequentially in an unsupervised manner, and then the whole system is fine-tuned using supervised learning techniques. . Reinforcement Learning Algorithms . There are no common algorithms. These work on Reward and Penalties and the learning happens over time by running it on multiple real-life examples . Algorithms which play Chess or Go are an example . | Programs used in Robots are another example . | . Batch and Online Learning algorithms . As the name says there are algorithms which have to be trained offline i.e. Batch Algorithms and algorithms which can learn on the fly i.e. Online algorithms . Instance vs Model algorithms . Depending on whether the algorithm uses learned instances to predict for new inputs like say Classification Algorithms (k-NearestNeighbors for example) or uses a Model like say Regression Algorithms where you have a line/plane. . Challenges in ML . Bad Data . | Bad Model . | . What to do with the Bad data or Bad model? . Feature Selection . | Feature Extraction . | Regularization . | Hyperparameters . | . Data Load . Below function will be useful to get data from online datasets. . import os . import tarfile . import urllib . DOWNLOAD_ROOT = “https://raw.githubusercontent.com/ageron/handson-ml2/master/” . HOUSING_PATH = os.path.join(“datasets”, “housing”) . HOUSING_URL = DOWNLOAD_ROOT + “datasets/housing/housing.tgz” . def fetch_housing_data(housing_url=HOUSING_URL, housing_path=HOUSING_PATH): . os.makedirs(housing_path, exist_ok=True) . tgz_path = os.path.join(housing_path, “housing.tgz”) . urllib.request.urlretrieve(housing_url, tgz_path) . housing_tgz = tarfile.open(tgz_path) . housing_tgz.extractall(path=housing_path) . housing_tgz.close() . Look at the next few posts on ML End to End process for more information. .",
            "url": "https://mrg-ai.github.io/blog/2020/05/05/ML-Intro.html",
            "relUrl": "/2020/05/05/ML-Intro.html",
            "date": " • May 5, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastai Deeplearningnotes",
            "content": "Deep Learning Notes . . My Notes based on 2019 FastAI course. The code mentioned below will not work on fastai latest version. However the general information mentioned below is valid. . General stuff . Jupyter notebook – Installed through Anaconda. But there are various other ways. . | Google Collab - https://colab.research.google.com/notebooks/welcome.ipynb - recent=true . | Use GPU while running the code. . | GPUs are good at running similar code (in this case mathematical models) multiple times and hence are necessary. CPUs can’t handle or are slow. . | Pytorch, TensorFlow, FastAI, numpy, pandas, matplotlib etc are all Python libraries. Some are deep learning specific and some are math specific. . | Data is stored on google compute VM (Collab’s backend) by default. However we can store on Google Drive and access it from within python code. . | Custom Data can be used and external links (google drive, dropbox etc) will be needed for any proper usage of programs (see lesson 2 notebook in google drive of &lt;emailmanjunathrg@gmail.com)&gt; . | Visual Studio Code can be used to browse through fastai or pytorch classes and understand the library code. . | Render can be used to deploy web apps; Google Compute Engine is another option. . | Further reading - Different types of Models (Resnet, Inception, VGGNet, AlexNet etc) . | . Below lines of code are needed when running notebooks using FastAI. Few are for Google Drive, Library Reloads, Ignore Pytorch related warnings, plotting inline in the notebook . !curl -s https://course.fast.ai/setup/colab  |  bash | . %reload_ext autoreload . %autoreload 2 . %matplotlib inline . import warnings . warnings.filterwarnings(“ignore”, category=UserWarning, module=”torch.nn.functional”) . from google.colab import drive . drive.mount(‘/content/gdrive’, force_remount=True) . root_dir = ”/content/gdrive/My Drive/” . base_dir = root_dir + ’fastai-v3/’ . Below is a javascript to download URLs from google search images into a csv file. I think it should work with any google search result. . Press CtrlShiftJ in Windows/Linux and CmdOptJ in Mac and paste below and enter. A csv file should get downloaded. . urls = Array.from(document.querySelectorAll(‘.rg_di .rg_meta’)).map(el=&gt;JSON.parse(el.textContent).ou); window.open(‘data:text/csv;charset=utf-8,’ + escape(urls.join(‘ n’))); . General Process for Training a Model . Below is a general flow for train a model. This is very general and at a high level. . There can be lots of variations and other steps in between and after. . Get the data with data (like images) and labels. Example command below . Labels can be present in various ways and below command/process will need to be changed accordingly. . data = ImageDataBunch.from_folder(path, train=”.”, valid_pct=0.2, .         ds_tfms=get_transforms(), size=224, num_workers=4).normalize(imagenet_stats) . Train the model using a CNN (convolutional neural network) . learn = cnn_learner(data, models.resnet34, metrics=error_rate) . Fit the data to the curve correctly using appropriate number of epochs . learn.fit_one_cycle(4) . You can interpret the data after this. You can plot confusion matrix or most confused output also. . interp = ClassificationInterpretation.from_learner(learn) . interp.plot_confusion_matrix() . Once you think the model has learnt, you can export the model so that it can be used in an application. This will create a file named ‘export.pkl’ in the directory where we were working that contains everything we need to deploy our model (the model, the weights but also some metadata like the classes or the transforms/normalization used). . learn.export() . This export file can be used to deploy on Render.com or Google Compute etc. . Example - . https://github.com/mrg-ai/SouthIndianSnackClassifier . ** DataBlock API** . In the previous section, we used ImageDataBunch.from_folder method to get the “data” which was then passed to a Learner. This was a factory method from FastAI library. It does quite a few things in the backend and also makes some decisions. . We cannot use Factory methods all the time. We will go through the steps that happen in these type of Factory methods and understand the flow. Then we can use those classes and we can have more control. This will also help in understanding what happens to the data before we send it to a learner. Some of these are Pytorch Classes i.e. Dataset, Dataloader and Databunch is a FastAI class . Dataset – This is the first step in getting the data. An object (like image) and its label(s) form a dataset. . Dataloader – A dataset is not enough to train a model. Batches of datasets need to be sent to the model. For creating these batches, we use a Dataloader. . Databunch – It still isn’t enough to train a model, because we’ve got no way to validate the model. If all we have is a training set, then we have no way to know how we’re doing. We need a separate set of held out data, a validation set, to see how we’re getting along. We might also use a test set. . To get the data in a format that we can send to Learner - We use a fastai class called a DataBunch. A DataBunch is something which binds together a training data loader and a validation data loader. . This object can then be sent to a Learner and we can start fitting the data using a proper learning rate, number of epochs, appropriate model etc. . Below is an example for an Image Dataset. . . In this example, ImageFileList.fromfolder creates Datasets using the files which are in a folder with name as “train-jpg” and the files with a suffix of .jpg. The information about the labels are obtained from a csv file and hence it uses .label_from_csv to which we pass the csv file name. . The data is split randomly (80:20 ratio) for training and validation datasets since we do not have them separately in this example. If we do, we should not use this class. We should use .split_by_folder if they are available in different folders. . Then we convert them into Pytorch Datasets using the .datasets . They are transformed using certain transformation rules. . Finally they are converted into a dataloader and eventually a databunch using the .databunch . Below is another example. This is an image example where images of 3 and 7 are stored in folders called 3 and 7. . path = untar_data(URLs.MNIST_TINY) . tfms = get_transforms(do_flip=False) . path.ls() . [PosixPath(‘/home/jhoward/.fastai/data/mnist_tiny/valid’), . PosixPath(‘/home/jhoward/.fastai/data/mnist_tiny/models’), . PosixPath(‘/home/jhoward/.fastai/data/mnist_tiny/train’), . PosixPath(‘/home/jhoward/.fastai/data/mnist_tiny/test’), . PosixPath(‘/home/jhoward/.fastai/data/mnist_tiny/labels.csv’)] . (path/’train’).ls() . [PosixPath(‘/home/jhoward/.fastai/data/mnist_tiny/train/3’), . PosixPath(‘/home/jhoward/.fastai/data/mnist_tiny/train/7’)] . data = (ImageFileList.from_folder(path) #Where to find the data? -&gt; in path and its subfolders . .label_from_folder() #How to label? -&gt; depending on the folder of the filenames . .split_by_folder() #How to split in train/valid? -&gt; use the folders . .add_test_folder() #Optionally add a test set . .datasets() #How to convert to datasets? . .transform(tfms, size=224) #Data augmentation? -&gt; use tfms with a size of 224 . .databunch()) #Finally? -&gt; use the defaults for conversion to ImageDataBunch . What kind of data set is this going to be? . It’s going to come from a list of image files which are in some folder. . They’re labeled according to the folder name that they’re in. . We’re going to split it into train and validation according to the folder that they’re in (train and valid). . You can optionally add a test set. We’re going to be talking more about test sets later in the course. . We’ll convert those into PyTorch datasets. . We will then transform them using this set of transforms (tfms), and we’re going to transform into size 224. . Then we’re going to convert them into a data bunch. . In each of these stages inside the parentheses, there are various parameters that you can pass to and customize how that all works. But in the case of something like this MNIST dataset, all the defaults pretty much work and hence no customizations are done. . Multi Label Dataset example . Movie Genres, Satellite Image Descriptions are some examples of Multi label datasets. . Each image can have multiple labels and the labels can repeat across images. . The same approach followed for single label example will work here also. Only thing that will change is the parameters or arguments passed to various classes that we call. For more details - . https://colab.research.google.com/github/fastai/course-v3/blob/master/nbs/dl1/lesson3-planet.ipynb - scrollTo=_bRElObaCKsr . Segmentation . In very simple words, normal image classification for every single pixel in every single image is what is called segmentation. Self Driving cars software use this a lot to differentiate between different things that the car sensors see. . It is also used in medical science for scans, images etc. . For segmentation, we don’t use a convolutional neural network. We can, but actually an architecture called U-Net turns out to be better. Learner.create_unet will be used rather than a cnn. . Look at camvid example in fastai or google drive - https://colab.research.google.com/drive/1O6zJfhQVjnAFMZhi5KG4yl9xrvFHpR5w . Some Learning Rate related notes - . Learning Rate Annealing - idea of decreasing the learning rate during training is an older one. . Recent idea is to keep increasing the learning rate initially and then decreasing so that the model learns quickly or reaches the correct point on the graph quickly. . Classification Problem for Text - NLP (natural language processing) . Text classification is different from images. Images are generally RGB layers and each pixel can be represented by a number and it is easier than it is for Texts. . Texts have to be converted to Numbers before we do any deep learning on it. . The two processes are Tokenization and Numericalization. . Idea for a NLP program - Pass a Hashtag to the program or app. . The App should give a bar graph showing how many of the tweets using the hashtag are Positive and how many are negative. . NLP uses RNN instead of CNN. RNN is Recurrent Neural Network. . Use a Wikipedia Dataset pretrained model to transfer learn for your group/corpus of data -Example – IMDB Movie Review Dataset (which has positive/negative labels). This model predicts the next word in a sentence because we train for language model labels and not on positive/negative labels. However, that is not much useful for a classification problem. We want to classify as Positive or Negative Sentiment. . Language Model Learner has a part called Encoder which stores information about what the model has understood about the statement it was input. Also, there is something called vocab which contains the tokes and numbers for each word. . These will be used further to predict the sentiment in the text classifier model. . We will use this IMBD trained Language Model Learner data’s vocab along with the original IMDB data (positive and negative labels) to create a classification model which can predict the labels for input data. . Tabular Data . Dataframes (panda library) are used to read tabular data from csv, RDBMS, Hadoop etc. . Generally, for Tabular data, Random Forests, Gradient Descent and other algorithms are used, but NNs can also be used. . Note – Go through the Machine Learning course for other non-NN algorithms. . http://course18.fast.ai/lessonsml1/lesson3.html . First 3 chapters give a good understanding of Random Forests. Notes about that below. Apart from RF (even that can be replaced with NNs), other algorithms can all be replaced with NNs. . Some reading - https://www.dataquest.io/blog/top-10-machine-learning-algorithms-for-beginners/ . https://towardsdatascience.com/understanding-gradient-boosting-machines-9be756fe76ab . Collab Filtering . This is for Recommendation systems like Amazons or Netflix where they suggest that you might like this because you bought this/saw this. . Theory Behind NNs . Dataloaders -&gt; [ Linear Function (Matrix Multiplication) -&gt; Activation Function] -&gt; Next layer … . Back propagation is nothing but . parameters minus= learning rate * parameters.gradient_descent(loss function) i.e. . parameters = parameters minus learning rate * parameters.gradient_descent(loss function) . . Revision of GD (Gradient Descent) (Lesson 2 from the middle of the video) . Yi= a1Xi1+a2Xi2+constant and let’s assume Xi2=1 for simplicity. . If the above equation is executed for different “i” it will become a matrix multiplication. . . Using pytorch above equation can be written as below. (X first column is Random numbers) . . Tensor is a regular sized (non-ragged) array. It can be rectangular (2D) or a Cube (3D) or more dimensions. But it is always a regular size. . An example – Image is a Rank 3 tensor since it has 3 layers (RGB). . If we plot the y function from screenshot above . . If we want to fit a line through these points without knowing the coefficients 3 and 2 i.e. Tensor A, we start with some random values and we can plot the line. . We can move around the line by using the derivative of the Loss (in this case MSE) and see how Y changes. . MSE – (y_hat(prediction)-y(actual))**2.mean() . Loss is nothing but the distance of the line from the dots. If we reduce the loss, the line will match the dots and go through them thereby keeping the loss at a minimum. . . The gradient/derivative is used along with learning rate to change the value of the co-efficients and bring the line closer to where we want. . . Weight Decay – All learners have a weight decay parameters in fastai and a value of 0.1 should help in general. . W- Weights/Parameters . L(x,w) – Loss function . M(x,w) – y_hat . The box is same as . parameters = parameters minus learning rate * parameters.gradient_descent(loss function) . . Momentum – The update to the parameters/weights is not just based on the derivative, instead 1/10 of it is the derivative and 90% of it is just the same direction that we went last time. This is exponentially weighted moving average of the step. . Generally, a momentum of 0.9 is used with SGD if we want to use momentum. . RMSProp – This is similar to Momentum but it is exponentially weighted moving average of the gradient squared. . Adam is Momentum + RMSProp – https://github.com/hiromis/notes/blob/master/Lesson5.md . Cross Entropy Loss – Loss used for Single Label Multi class classification problem . SoftMax Activation function – Activation function used in Single Label Multi class classification problems. . RESNET – Residual Net. The input from previous layer is added to this layer’s output. In other words the inputs skips this convolution (skip connection). Added is a + here. This is the basic theory of Resnet. . DenseNet – Same as resnet but instead of a +, a concat is used to concatenate previous layer’s input and its output and that is passed to this layer. It is memory intensive but works well for smaller datasets. . UNet – As the name says, it is in a U shape. It can be thought of Resnet from halfpoint onwards. . Example - First layer output is skipping all layers and directly going as input to last layer. . . Nearest Neighbor interpolation . Bi Linear interpolation – In layman terms - Techniques to increase the resolution sizes of image inputs. . CNN – . The matrix multiplications in a NN are replaced with a special Matrix multiplication in case of CNNs and they are called Convolutions. . Conv Kernel multiplied by Input matrix to get one single number. Kernel Matrix can be considered to be a matrix of weights which are tied at certain places and also is sparse. . By doing this, we achieve identifying different parts of an image and later it can all be tied together to identify the whole image. . . For example – a 3x3 matrix multiplied to another 3x3 gives a 3x3 in normal matrix multiplication. However, convolution will only give a single value. . Therefore, it is generally padded with zeroes to as shown below. . Note : This is 2D example, However images are generally 3D and the same idea extends to that as well. You will have more conv kernels and so on. For images, it could be 3 conv kernels to start with along with some kind of padding to increase the size of the Tensor. However practically, there are more kernels used even during start. . . However, we don’t use Matrix multiplication since its slow and the matrix is anyways sparse with many zeroes. . There are functions which do this called Convolution functions. . Stride 2 Convolution – Same as above, but skip one layer of cells or columns in matrix when moving to next section. After the left top corner is done, you skip to top right corner in above example instead of the middle 3 columns. This reduces the height and width of output matrix but we generally increase the kernels and the depth (channels) actually increases. . Average Pooling – After multiple layers, we will have more number of channels and some small height and width. What we need is Category of the image in a Image classifier. There could be say 5 categories. To get to this point, we do various things and one of the first things is Average pooling. It basically takes average of each channel. If the final layer gave an output of say 20 layers, we take average of each layer and get one value for each layer. These are stacked in a column vector of size 20. This is still more than the categories we expect. . This is passed through a linear layer to get the 5 categories that we want. One of the categories in this vector should have a high probability value based on which the prediction can be obtained. . ResNet – See above. . DenseNet – See above. . UNET – See above. . UNET gives an output image of same size as input. The down sampling reduces the image size for sure and we know that. For increasing the size by final layer, it does a Stride ½ convolution. . Apart from padding on the perimeter, it also adds padding in between as shown below. . The 2x2 blue colored pixels are original image. Remaining are all padding. . . This is slightly older where all the padded pixels are basically zeros or white pixels. . Below is what is done now to do up-sampling. This is called Nearest Neighbor interpolation. . Bilinear Interpolation is similar but takes a weighted average of the surrounding neighbors. . Techniques like above are used in up sampling path of the UNET. However the down sampling would have reduced the size and up sampling only from that will be not useful. . A skip connection or identity connection is added in up direction where the inputs of the down sampling path are added as inputs. See UNET diagram above. . . GAN . . RNN . Inputs – Get the inputs as Tensors . | Weights/Parameters/Coefficients – Multiply with Random weights or Pretrained weights. This is Linear computation i.e. Linear layer or Affine Layer. . | Activations – The output of Affine function are also Activations. But they are Linear activations. Pass the output of previous step through a non linear activation function like ReLU or Softmax. This is the non-linearity in the NeuralNet. . Activation Function – ReLU, Softmax, Sigmoid and many others. | . | Output – The output is obtained. . | Layers – Each of these is a layer . | Loss – Compare the output with actual output and calculate the Loss. MSE, RMSE, Log(MSE) etc are some of the Loss functions. . | . L(x,w) = MSE(m(x,w),y) +WD* Sum(W**2) . Since we calculate the gradient of a Loss function, that calculates the gradient of the WD*(Sum(W**2)) . Adding the +WD* Sum(W**2) to Loss function is called L2 regularization. . The gradient of WD*(Sum(W**2)) which is used in Back propagation (params = params-LR*gradient (Loss function) i.e. 2*WD*W (generalized to WD*W) is called Weight Decay. . Back propagation is nothing but parameters = parameters minus learning rate * parameters.gradient_descent(loss function) . | One Hot Encoded Matrix – This is done to preprocess the input data that is fed to a neural net. This is helpful to pass the data into NN in a common format of Matrices. One matrix of One Hot Encoded Matrix and the other input Random Weights Matrix. . | Embedding – Array Lookup or Matrix Multiply by One hot encoded matrix. . | Latent features or Latent Factors – Insights that NNs can give. Embeddings also give latent features in Collab learning. . | N_factors in collab problems - Size of the embedding matrix. . | Weight Decay - Weight Decay is a type of Regularization. Weight decay is a number used to multiply the parameters during Loss calculation. We should use many parameters and along with that use weight decay. General value should be 0.1 . | . Parameters at time/epoch T = parameters at epoch T-1 – LR*derivative (loss with respect to parameters at T-1) . Adam – Momentum+RMS Prop . Momentum - parameters = parameters minus learning rate * [ x% (parameters.gradient_descent(loss function)) + (100-x)% (previous derivative)] . Or it can also be written as Step T = alpha*gradient + (1-alpha)*Step T-1 . This second part of 1-alpha is called Exponentially weighted moving average of past gradients. Step T-1 inturn uses Step T-2. So (1-alpha) gets multiplied multiple times. | . | RMS Prop - Exponentially weighted moving average of past gradient square and use that to divide as shown below . | . | . parameters = parameters minus learning rate *{ [ x% (parameters.gradient_descent(loss function)) + (100-x)% (previous derivative)]}/{ Exponentially weighted moving average of past gradient square} . Metric . | User Bias and Item Bias – Terms in Collab which highlight the biases that the user (like customer id, user_id) can have and the biases of the Item (like movie (popular movie) or product (star product like Apple devices)) . | Cross-Entropy – Loss function where we want a single value to be selected as output rather than probability of being close to the output. That is why it’s used in Single Label Multi class classification problems. . Loss cannot be MSE for learners which predict individual classes. MSE is more suited for finding a number on a graph kinda problems. . | Cross Entropy is a Loss function which provides low loss when the prediction is correct and its confident and high loss for wrong predictions with high confidence. . | . | Softmax – For Cross Entropy Loss function to work correctly and give positive probability and to be sure that sum of probabilities for possible values to be less than 1, the activation function to be used along with this Loss function is Softmax function. . | Dropout – Dropout is a type of regularization. Some activations are thrown out in each mini batch. We keep lot of parameters but throw away some activation randomly in each mini batch so that it does not overfit. . | BatchNorm – Generally for continuous variables. Used for most cases. This is basically to scale up the output. For example if the range of values we expect is 1 to 5, but the NN gives -1 to 1, using batch norm layer would help to normalize it.. . Yhat = f(w0, w1, w2…. Wn, X)*g + b . | Loss = Sum (y-yhat)**2 . | . | WeightNorm is another new normalization used in Fastai. Recent thing.. . | Data Augmentation - Modify model inputs during training in order to effectively increase data size. For examples - Images can be flipped or warped or perspective changes etc to basically convert one image into multiple images which look different from one another. . | Label_Cls option in Tabular - Used to pass options like Output variable to be considered a Float, Take Log of it while creating labels for it etc.. . | Tabular Architecture - Mostly Embeddings of many layers. . | Data Augmentation . | Fine Tuning . | Layer Deletion and Random weights . | Freezing and Unfreezing . | .",
            "url": "https://mrg-ai.github.io/blog/2020/01/12/FastAI-DeepLearningNotes.html",
            "relUrl": "/2020/01/12/FastAI-DeepLearningNotes.html",
            "date": " • Jan 12, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "https://twitter.com/ParamsAndActivs . http://mrgwrites.blogspot.com/ .",
          "url": "https://mrg-ai.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mrg-ai.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}